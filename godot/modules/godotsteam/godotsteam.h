#ifndef GODOTSTEAM_H
#define GODOTSTEAM_H

/////////////////////////////////////////////////
// SILENCE STEAMWORKS WARNINGS
/////////////////////////////////////////////////
//
// Turn off MSVC-only warning about strcpy
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS 1
#pragma warning(disable:4996)
#pragma warning(disable:4828)
#endif

/////////////////////////////////////////////////
// INCLUDE HEADERS
/////////////////////////////////////////////////
//
// Include INT types header
#include <inttypes.h>

// Include Steamworks API header
#include "steam/steam_api.h"

// Include Godot headers
#include "core/object.h"
#include "scene/resources/texture.h"
#include "core/reference.h"
#include "core/dictionary.h"
#include "core/method_bind_ext.gen.inc"

class Steam: public Object {
	GDCLASS(Steam, Object);

	public:
		/////////////////////////////////////////
		// Steamworks API enums /////////////////
		/////////////////////////////////////////
		//
		enum AccountType {
			ACCOUNT_TYPE_INVALID = 0, ACCOUNT_TYPE_INDIVIDUAL = 1, ACCOUNT_TYPE_MULTISEAT = 2, ACCOUNT_TYPE_GAME_SERVER = 3, ACCOUNT_TYPE_ANON_GAME_SERVER = 4, ACCOUNT_TYPE_PENDING = 5, ACCOUNT_TYPE_CONTENT_SERVER = 6, ACCOUNT_TYPE_CLAN = 7, ACCOUNT_TYPE_CHAT = 8, ACCOUNT_TYPE_CONSOLE_USER = 9, ACCOUNT_TYPE_ANON_USER = 10, ACCOUNT_TYPE_MAX = 11
		};
		enum AppOwnershipFlags {
			APP_OWNERSHIP_FLAGS_NONE = 0x0000, APP_OWNERSHIP_FLAGS_OWNS_LICENSE = 0x0001, APP_OWNERSHIP_FLAGS_FREE_LICENSE = 0x0002, APP_OWNERSHIP_FLAGS_REGION_RESTRICTED = 0x0004, APP_OWNERSHIP_FLAGS_LOW_VIOLENCE = 0x0008, APP_OWNERSHIP_FLAGS_INVALID_PLATFORM = 0x0010, APP_OWNERSHIP_FLAGS_SHARED_LICENSE = 0x0020,
			APP_OWNERSHIP_FLAGS_FREE_WEEKEND = 0x0040, APP_OWNERSHIP_FLAGS_RETAIL_LICENSE = 0x0080, APP_OWNERSHIP_FLAGS_LICENSE_LOCKED = 0x0100, APP_OWNERSHIP_FLAGS_LICENSE_PENDING = 0x0200, APP_OWNERSHIP_FLAGS_LICENSE_EXPIRED = 0x0400, APP_OWNERSHIP_FLAGS_LICENSE_PERMANENT = 0x0800, APP_OWNERSHIP_FLAGS_LICENSE_RECURRING = 0x1000,
			APP_OWNERSHIP_FLAGS_LICENSE_CANCELED = 0x2000, APP_OWNERSHIP_FLAGS_AUTO_GRANT = 0x4000, APP_OWNERSHIP_FLAGS_PENDING_GIFT = 0x8000, APP_OWNERSHIP_FLAGS_RENTAL_NOT_ACTIVATED = 0x10000, APP_OWNERSHIP_FLAGS_RENTAL = 0x20000, APP_OWNERSHIP_FLAGS_SITE_LICENSE = 0x40000
		};
		enum AppReleaseState {
			APP_RELEASE_STATE_UNKNOWN = 0, APP_RELEASE_STATE_UNAVAILABLE = 1, APP_RELEASE_STATE_PRERELEASE = 2, APP_RELEASE_STATE_PRELOAD_ONLY = 3, APP_RELEASE_STATE_RELEASED = 4
		};
		enum AppType {
			APP_TYPE_INVALID = 0x000, APP_TYPE_GAME = 0x001, APP_TYPE_APPLICATION = 0x002, APP_TYPE_TOOL = 0x004, APP_TYPE_DEMO = 0x008, APP_TYPE_MEDIA_DEPRECATED = 0x010, APP_TYPE_DLC = 0x020, APP_TYPE_GUIDE = 0x040, APP_TYPE_DRIVER = 0x080, APP_TYPE_CONFIG = 0x100, APP_TYPE_HARDWARE = 0x200, APP_TYPE_FRANCHISE = 0x400, APP_TYPE_VIDEO = 0x800,
			APP_TYPE_PLUGIN = 0x1000, APP_TYPE_MUSIC = 0x2000, APP_TYPE_SERIES = 0x4000, APP_TYPE_SHORTCUT = 0x40000000, APP_TYPE_DEPOT_ONLY = 0X80000000
		};
		enum AuthSessionResponse {
			AUTH_SESSION_RESPONSE_OK = 0, AUTH_SESSION_RESPONSE_USER_NOT_CONNECTED_TO_STEAM = 1, AUTH_SESSION_RESPONSE_NO_LICENSE_OR_EXPIRED = 2, AUTH_SESSION_RESPONSE_VAC_BANNED = 3, AUTH_SESSION_RESPONSE_LOGGED_IN_ELSEWHERE = 4, AUTH_SESSION_RESPONSE_VAC_CHECK_TIMEDOUT = 5, AUTH_SESSION_RESPONSE_AUTH_TICKET_CANCELED = 6,
			AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID_ALREADY_USED = 7, AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID = 8, AUTH_SESSION_RESPONSE_PUBLISHER_ISSUED_BAN = 9
		};
		enum BeginAuthSessionResult {
			BEGIN_AUTH_SESSION_RESULT_OK = 0, BEGIN_AUTH_SESSION_RESULT_INVALID_TICKET = 1, BEGIN_AUTH_SESSION_RESULT_DUPLICATE_REQUEST = 2, BEGIN_AUTH_SESSION_RESULT_INVALID_VERSION = 3, BEGIN_AUTH_SESSION_RESULT_GAME_MISMATCH = 4, BEGIN_AUTH_SESSION_RESULT_EXPIRED_TICKET = 5
		};
		enum BroadcastUploadResult {
			BROADCAST_UPLOAD_RESULT_NONE = 0, BROADCAST_UPLOAD_RESULT_OK = 1, BROADCAST_UPLOAD_RESULT_INIT_FAILED = 2, BROADCAST_UPLOAD_RESULT_FRAME_FAILED = 3, BROADCAST_UPLOAD_RESULT_TIME_OUT = 4, BROADCAST_UPLOAD_RESULT_BANDWIDTH_EXCEEDED = 5, BROADCAST_UPLOAD_RESULT_LOW_FPS = 6, BROADCAST_UPLOAD_RESULT_MISSING_KEYFRAMES = 7,
			BROADCAST_UPLOAD_RESULT_NO_CONNECTION = 8, BROADCAST_UPLOAD_RESULT_RELAY_FAILED = 9, BROADCAST_UPLOAD_RESULT_SETTINGS_CHANGED = 10, BROADCAST_UPLOAD_RESULT_MISSING_AUDIO = 11, BROADCAST_UPLOAD_RESULT_TOO_FAR_BEHIND = 12, BROADCAST_UPLOAD_RESULT_TRANSCODE_BEHIND = 13
		};
		enum ChatEntryType {
			CHAT_ENTRY_TYPE_INVALID = 0, CHAT_ENTRY_TYPE_CHAT_MSG = 1, CHAT_ENTRY_TYPE_TYPING = 2, CHAT_ENTRY_TYPE_INVITE_GAME = 3, CHAT_ENTRY_TYPE_EMOTE = 4, CHAT_ENTRY_TYPE_LEFT_CONVERSATION = 6, CHAT_ENTRY_TYPE_ENTERED = 7, CHAT_ENTRY_TYPE_WAS_KICKED = 8, CHAT_ENTRY_TYPE_WAS_BANNED = 9, CHAT_ENTRY_TYPE_DISCONNECTED = 10, CHAT_ENTRY_TYPE_HISTORICAL_CHAT = 11,
			CHAT_ENTRY_TYPE_LINK_BLOCKED = 14
		};
		enum ChatRoomEnterResponse {
			CHAT_ROOM_ENTER_RESPONSE_SUCCESS = 1, CHAT_ROOM_ENTER_RESPONSE_DOESNT_EXIST = 2, CHAT_ROOM_ENTER_RESPONSE_NOT_ALLOWED = 3, CHAT_ROOM_ENTER_RESPONSE_FULL = 4, CHAT_ROOM_ENTER_RESPONSE_ERROR = 5, CHAT_ROOM_ENTER_RESPONSE_BANNED = 6, CHAT_ROOM_ENTER_RESPONSE_LIMITED = 7, CHAT_ROOM_ENTER_RESPONSE_CLAN_DISABLED = 8, CHAT_ROOM_ENTER_RESPONSE_COMMUNITY_BAN = 9,
			CHAT_ROOM_ENTER_RESPONSE_MEMBER_BLOCKED_YOU = 10, CHAT_ROOM_ENTER_RESPONSE_YOU_BLOCKED_MEMBER = 11
		};
		enum ChatSteamIDInstanceFlags {
			CHAT_ACCOUNT_INSTANCE_MASK = 0X00000FFF, CHAT_INSTANCE_FLAG_CLAN = ((k_unSteamAccountInstanceMask + 1) >> 1), CHAT_INSTANCE_FLAG_LOBBY = ((k_unSteamAccountInstanceMask + 1) >> 2), CHAT_INSTANCE_FLAG_MMS_LOBBY = ((k_unSteamAccountInstanceMask + 1) >> 3)
		};
		enum DenyReason {
			DENY_INVALID = 0, DENY_INVALID_VERSION = 1, DENY_GENERIC = 2, DENY_NOT_LOGGED_ON = 3, DENY_NO_LICENSE = 4, DENY_CHEATER = 5, DENY_LOGGED_IN_ELSEWHERE = 6, DENY_UNKNOWN_TEXT = 7, DENY_INCOMPATIBLE_ANTI_CHEAT = 8, DENY_MEMORY_CORRUPTION = 9, DENY_INCOMPATIBLE_SOFTWARE = 10, DENY_STEAM_CONNECTION_LOST = 11, DENY_STEAM_CONNECTION_ERROR = 12,
			DENY_STEAM_RESPONSE_TIMED_OUT = 13, DENY_STEAM_VALIDATION_STALLED = 14, DENY_STEAM_OWNER_LEFT_GUEST_USER = 15
		};
		enum GameIDType {
			GAME_TYPE_APP = 0, GAME_TYPE_GAME_MOD = 1, GAME_TYPE_SHORTCUT = 2, GAME_TYPE_P2P = 3
		};
		enum LAUNCH_OPTION_Type {
			LAUNCH_OPTION_TYPE_NONE = 0, LAUNCH_OPTION_TYPE_DEFAULT = 1, LAUNCH_OPTION_TYPE_SAFE_MODE = 2, LAUNCH_OPTION_TYPE_MULTIPLAYER = 3, LAUNCH_OPTION_TYPE_CONFIG = 4, LAUNCH_OPTION_TYPE_OPEN_VR = 5, LAUNCH_OPTION_TYPE_SERVER = 6, LAUNCH_OPTION_TYPE_EDITOR = 7, LAUNCH_OPTION_TYPE_MANUAL = 8, LAUNCH_OPTION_TYPE_BENCHMARK = 9, LAUNCH_OPTION_TYPE_OPTION1 = 10,
			LAUNCH_OPTION_TYPE_OPTION2 = 11, LAUNCH_OPTION_TYPE_OPTION3 = 12, LAUNCH_OPTION_TYPE_OCULUS_VR = 13, LAUNCH_OPTION_TYPE_OPEN_VR_OVERLAY = 14, LAUNCH_OPTION_TYPE_OS_VR = 15, LAUNCH_OPTION_TYPE_DIALOG = 1000
		};
		enum MarketingMessageFlags {
			MARKETING_MESSAGE_FLAGS_NONE = 0, MARKETING_MESSAGE_FLAGS_HIGH_PRIORITY = (1<<0), MARKETING_MESSAGE_FLAGS_PLATFORM_WINDOWS = (1<<1), MARKETING_MESSAGE_FLAGS_PLATFORM_MAC = (1<<2), MARKETING_MESSAGE_FLAGS_PLATFORM_LINUX = (1<<3), MARKETING_MESSAGE_FLAGS_PLATFORM_RESTRICTIONS
		};
		enum NotificationPosition {
			POSITION_TOP_LEFT = 0, POSITION_TOP_RIGHT = 1, POSITION_BOTTOM_LEFT = 2, POSITION_BOTTOM_RIGHT = 3
		};
		enum Result {
			RESULT_OK = 1, RESULT_FAIL = 2, RESULT_NO_CONNECTION = 3, RESULT_INVALID_PASSWORD = 5, RESULT_LOGGED_IN_ELSEWHERE = 6, RESULT_INVALID_PROTOCOL_VER = 7, RESULT_INVALID_PARAM = 8, RESULT_FILE_NOT_FOUND = 9, RESULT_BUSY = 10, RESULT_INVALID_STATE = 11, RESULT_INVALID_NAME = 12, RESULT_INVALID_EMAIL = 13, RESULT_DUPLICATE_NAME = 14, RESULT_ACCESS_DENIED = 15,
			RESULT_TIMEOUT = 16, RESULT_BANNED = 17, RESULT_ACCOUNT_NOT_FOUND = 18, RESULT_INVALID_STEAM_ID = 19, RESULT_SERVICE_UNAVAILABLE = 20, RESULT_NOT_LOGGED_ON = 21, RESULT_PENDING = 22, RESULT_ENCRYPTION_FAILURE = 23, RESULT_INSUFFICIENT_PRIVILEGE = 24, RESULT_LIMIT_EXCEEDED = 25, RESULT_REVOKED = 26, RESULT_EXPIRED = 27, RESULT_ALREADY_REDEEMED = 28,
			RESULT_DUPLICATE_REQUEST = 29, RESULT_ALREADY_OWNED = 30, RESULT_IP_NOT_FOUND = 31, RESULT_PERSIST_FAILED = 32, RESULT_LOCKING_FAILED = 33, RESULT_LOG_ON_SESSION_REPLACED = 34, RESULT_CONNECT_FAILED = 35, RESULT_HANDSHAKE_FAILED = 36, RESULT_IO_FAILURE = 37, RESULT_REMOTE_DISCONNECT = 38, RESULT_SHOPPING_CART_NOT_FOUND = 39, RESULT_BLOCKED = 40,
			RESULT_IGNORED = 41, RESULT_NO_MATCH = 42, RESULT_ACCOUNT_DISABLED = 43, RESULT_SERVICE_READ_ONLY = 44, RESULT_ACCOUNT_NOT_FEATURED = 45, RESULT_ADMINISTRATOR_OK = 46, RESULT_CONTENT_VERSION = 47, RESULT_TRY_ANOTHER_CM = 48, RESULT_PASSWORD_REQUIRED_TO_KICK_SESSION = 49, RESULT_ALREADY_LOGGED_IN_ELSEWHERE = 50, RESULT_SUSPENDED = 51, RESULT_CANCELLED = 52,
			RESULT_DATA_CORRUPTION = 53, RESULT_DISK_FULL = 54, RESULT_REMOTE_CALL_FAILED = 55, RESULT_PASSWORD_UNSET = 56, RESULT_EXTERNAL_ACCOUNT_UNLINKED = 57, RESULT_PSN_TICKET_INVALID = 58, RESULT_EXTERNAL_ACCOUNT_ALREADY_LINKED = 59, RESULT_REMOTE_FILE_CONFLICT = 60, RESULT_ILLEGAL_PASSWORD = 61, RESULT_SAME_AS_PREVIOUS_VALUE = 62,
			RESULT_ACCOUNT_LOG_ON_DENIED = 63, RESULT_CANNOT_USE_OLD_PASSWORD = 64, RESULT_INVALID_LOGIN_AUTH_CODE = 65, RESULT_ACCOUNT_LOG_ON_DENIED_NO_MAIL = 66, RESULT_HARDWARE_NOT_CAPABLE_OF_IPT = 67, RESULT_IPT_INIT_ERROR = 68, RESULT_PARENTAL_CONTROL_RESTRICTED = 69, RESULT_FACEBOOK_QUERY_ERROR = 70, RESULT_EXPIRED_LOGIN_AUTH_CODE = 71,
			RESULT_IP_LOGIN_RESTRICTION_FAILED = 72, RESULT_ACCOUNT_LOCKED_DOWN = 73, RESULT_ACCOUNT_LOG_ON_DENIED_VERIFIED_EMAIL_REQUIRED = 74, RESULT_NO_MATCHING_URL = 75, RESULT_BAD_RESPONSE = 76, RESULT_REQUIRE_PASSWORD_REENTRY = 77, RESULT_VALUE_OUT_OF_RANGE = 78, RESULT_UNEXPECTED_ERROR = 79, RESULT_DISABLED = 80, RESULT_INVALID_CEG_SUBMISSION = 81,
			RESULT_RESTRICTED_DEVICE = 82, RESULT_REGION_LOCKED = 83, RESULT_RATE_LIMIT_EXCEEDED = 84, RESULT_ACCOUNT_LOGIN_DENIED_NEED_TWO_FACTOR = 85, RESULT_ITEM_DELETED = 86, RESULT_ACCOUNT_LOGIN_DENIED_THROTTLE = 87, RESULT_TWO_FACTOR_CODE_MISMATCH = 88, RESULT_TWO_FACTOR_ACTIVATION_CODE_MISMATCH = 89, RESULT_ACCOUNT_ASSOCIATED_TO_MULTIPLE_PARTNERS = 90,
			RESULT_NOT_MODIFIED = 91, RESULT_NO_MOBILE_DEVICE = 92, RESULT_TIME_NOT_SYNCED = 93, RESULT_SMS_CODE_FAILED = 94, RESULT_ACCOUNT_LIMIT_EXCEEDED = 95, RESULT_ACCOUNT_ACTIVITY_LIMIT_EXCEEDED = 96, RESULT_PHONE_ACTIVITY_LIMIT_EXCEEDED = 97, RESULT_REFUND_TO_WALLET = 98, RESULT_EMAIL_SEND_FAILURE = 99, RESULT_NOT_SETTLED = 100, RESULT_NEED_CAPTCHA = 101,
			RESULT_GSLT_DENIED = 102, RESULT_GS_OWNER_DENIED = 103, RESULT_INVALID_ITEM_TYPE = 104, RESULT_IP_BANNED = 105, RESULT_GSLT_EXPIRED = 106, RESULT_INSUFFICIENT_FUNDS = 107, RESULT_TOO_MANY_PENDING = 108
		};
		enum SteamUserStatType {
			STEAM_USER_STAT_TYPE_INVALID = 0, STEAM_USER_STAT_TYPE_INT = 1, STEAM_USER_STAT_TYPE_FLOAT = 2, STEAM_USER_STAT_TYPE_AVGRATE = 3, STEAM_USER_STAT_TYPE_ACHIEVEMENTS = 4, STEAM_USER_STAT_TYPE_GROUPACHIEVEMENTS = 5, STEAM_USER_STAT_TYPE_MAX = 6
		};
		enum Universe {
			UNIVERSE_INVALID = 0, UNIVERSE_PUBLIC = 1, UNIVERSE_BETA = 2, UNIVERSE_INTERNAL = 3, UNIVERSE_DEV = 4, UNIVERSE_MAX = 5
		};
		enum UserHasLicenseForAppResult {
			USER_HAS_LICENSE_RESULT_HAS_LICENSE = 0, USER_HAS_LICENSE_RESULT_DOES_NOT_HAVE_LICENSE = 1, USER_HAS_LICENSE_RESULT_NO_AUTH = 2
		};
		enum VoiceResult {
			VOICE_RESULT_OK = 0, VOICE_RESULT_NOT_INITIALIZED = 1, VOICE_RESULT_NOT_RECORDING = 2, VOICE_RESULT_NO_DATE = 3, VOICE_RESULT_BUFFER_TOO_SMALL = 4, VOICE_RESULT_DATA_CORRUPTED = 5, VOICE_RESULT_RESTRICTED = 6
		};
		enum VRHMDType {
			VR_HMD_TYPE_NONE = -1, VR_HMD_TYPE_UNKNOWN = 0, VR_HMD_TYPE_HTC_DEV = 1, VR_HMD_TYPE_HTC_VIVEPRE = 2, VR_HMD_TYPE_HTC_VIVE = 3, VR_HMD_TYPE_HTC_UNKNOWN = 20, VR_HMD_TYPE_OCULUS_DK1 = 21, VR_HMD_TYPE_OCULUS_DK2 = 22, VR_HMD_TYPE_OCULUS_RIFT = 23, VR_HMD_TYPE_OCULUS_UNKNOWN = 40
		};

		// Friends enums
		enum AvatarSizes {
			AVATAR_SMALL = 1, AVATAR_MEDIUM = 2, AVATAR_LARGE = 3
		};
		enum FriendFlags {
			FRIEND_FLAG_NONE = 0X00, FRIEND_FLAG_BLOCKED = 0X01, FRIEND_FLAG_FRIENDSHIP_REQUESTED = 0X02, FRIEND_FLAG_IMMEDIATE = 0X04, FRIEND_FLAG_CLAN_MEMBER = 0X08, FRIEND_FLAG_ON_GAME_SERVER = 0X10, FRIEND_FLAG_REQUESTING_FRIENDSHIP = 0X80, FRIEND_FLAG_REQUESTING_INFO = 0X100, FRIEND_FLAG_IGNORED = 0X200, FRIEND_FLAG_IGNORED_FRIEND = 0X400,
			FRIEND_FLAG_CHAT_MEMBER = 0X1000, FRIEND_FLAG_ALL = 0XFFFF
		};
		enum FriendRelationship {
			FRIEND_RELATION_NONE = 0, FRIEND_RELATION_BLOCKED = 1, FRIEND_RELATION_REQUEST_RECIPIENT = 2, FRIEND_RELATION_FRIEND = 3, FRIEND_RELATION_REQUEST_INITIATOR = 4,FRIEND_RELATION_IGNORED = 5, FRIEND_RELATION_IGNORED_FRIEND = 6, FRIEND_RELATION_SUGGESTED = 7, FRIEND_RELATION_MAX = 8			
		};
		enum OverlayToStoreFlag {
			OVERLAY_TO_STORE_FLAG_NONE = 0, OVERLAY_TO_STORE_FLAG_ADD_TO_CART = 1, OVERLAY_TO_STORE_FLAG_AND_TO_CART_AND_SHOW = 2
		};
		enum PersonaChange {
			PERSONA_CHANGE_NAME = 0X0001, PERSONA_CHANGE_STATUS = 0X0002, PERSONA_CHANGE_COME_ONLINE = 0X0004, PERSONA_CHANGE_GONE_OFFLINE = 0X0008, PERSONA_CHANGE_GAME_PLAYED = 0X0010, PERSONA_CHANGE_GAME_SERVER = 0X0020, PERSONA_CHANGE_AVATAR = 0X0040, PERSONA_CHANGE_JOINED_SOURCE = 0X0080, PERSONA_CHANGE_LEFT_SOURCE = 0X0100,
			PERSONA_CHANGE_RELATIONSHIP_CHANGED = 0X0200, PERSONA_CHANGE_NAME_FIRST_SET = 0X0400, PERSONA_CHANGE_FACEBOOK_INFO = 0X0800, PERSONA_CHANGE_NICKNAME = 0X1000, PERSONA_CHANGE_STEAM_LEVEL = 0X2000
		};
		enum PersonaState {
			PERSONA_STATE_OFFLINE = 0, PERSONA_STATE_ONLINE = 1, PERSONA_STATE_BUSY = 2, PERSONA_STATE_AWAY = 3, PERSONA_STATE_SNOOZE = 4, PERSONA_STATE_LOOKING_TO_TRADE = 5, PERSONA_STATE_LOOKING_TO_PLAY = 6, PERSONA_STATE_MAX = 7
		};
		enum UserRestriction {
			USER_RESTRICTION_NONE = 0, USER_RESTRICTION_UNKNOWN = 1, USER_RESTRICTION_ANY_CHAT = 2, USER_RESTRICTION_VOICE_CHAT = 4, USER_RESTRICTION_GROUP_CHAT = 8, USER_RESTRICTION_RATING = 16, USER_RESTRICTION_GAME_INVITES = 32, USER_RESTRICTION_TRADING = 64
		};

		// Game Search enums
		enum GameSearchErrorCode {
			GAME_SEARCH_ERROR_CODE_OK = 1, GAME_SEARCH_ERROR_CODE_SEARCH_AREADY_IN_PROGRESS = 2, GAME_SEARCH_ERROR_CODE_NO_SEARCH_IN_PROGRESS = 3, GAME_SEARCH_ERROR_CODE_NOT_LOBBY_LEADER = 4, GAME_SEARCH_ERROR_CODE_NO_HOST_AVAILABLE = 5, GAME_SEARCH_ERROR_CODE_SEARCH_PARAMS_INVALID = 6, GAME_SEARCH_ERROR_CODE_OFFLINE = 7, GAME_SEARCH_ERROR_CODE_NOT_AUTHORIZED = 8,
			GAME_SEARCH_ERROR_CODE_UNKNOWN_ERROR = 9
		};
		enum PlayerResult {
			PLAYER_RESULT_FAILED_TO_CONNECT = 1, PLAYER_RESULT_ABANDONED = 2, PLAYER_RESULT_KICKED = 3, PLAYER_RESULT_INCOMPLETE = 4, PLAYER_RESULT_COMPLETED = 5
		};

		// HTMLSurface enums
		enum HTMLKeyModifiers {
			HTML_KEY_MODIFIER_NONE = 0, HTML_KEY_MODIFIER_ALT_DOWN = (1<<0), HTML_KEY_MODIFIER_CTRL_DOWN = (1<<1), HTML_KEY_MODIFIER_SHIFT_DOWN = (1<<2)
		};
		enum HTMLMouseButton {
			HTML_MOUSE_BUTTON_LEFT = 0, HTML_MOUSE_BUTTON_RIGHT = 1, HTML_MOUSE_BUTTON_MIDDLE = 2
		};
		enum MouseCursor {
			DC_USER = 0, DC_NONE = 1, DC_ARROW = 2, DC_IBEAM = 3, DC_HOUR_GLASS = 4, DC_WAIT_ARROW = 5, DC_CROSSHAIR = 6, DC_UP = 7, DC_SIZE_NW = 8, DC_SIZE_SE = 9, DC_SIZE_NE = 10, DC_SIZE_SW = 11, DC_SIZE_W = 12, DC_SIZE_E = 13, DC_SIZE_N = 14, DC_SIZE_S = 15, DC_SIZE_WE = 16, DC_SIZE_NS = 17, DC_SIZE_ALL = 18, DC_NO = 19, DC_HAND = 20, DC_BLANK = 21,
			DC_MIDDLE_PAN = 22, DC_NORTH_PAN = 23, DC_NORTH_EAST_PAN = 24, DC_EAST_PAN = 25, DC_SOUTH_EAST_PAN = 26, DC_SOUTH_PAN = 27, DC_SOUTH_WEST_PAN = 28, DC_WEST_PAN = 29, DC_NORTH_WEST_PAN = 30, DC_ALIAS = 31, DC_CELL = 32, DC_COL_RESIZE = 33, DC_COPY_CUR = 34, DC_VERTICAL_TEXT = 35, DC_ROW_RESIZE = 36, DC_ZOOM_IN = 37, DC_ZOOM_OUT = 38, DC_HELP = 39,
			DC_CUSTOM = 40, DC_LAST = 41
		};

		// HTTP enums
		enum HTTPMethod {
			HTTP_METHOD_INVALID = 0, HTTP_METHOD_GET = 1, HTTP_METHOD_HEAD = 2, HTTP_METHOD_POST = 3, HTTP_METHOD_PUT = 4, HTTP_METHOD_DELETE = 5, HTTP_METHOD_OPTIONS = 6, HTTP_METHOD_PATCH = 7
		};
		enum HTTPStatusCode {
			HTTP_STATUS_CODE_INVALID = 0, HTTP_STATUS_CODE_100_CONTINUE = 100, HTTP_STATUS_CODE_101_SWITCHING_PROTOCOLS = 101, HTTP_STATUS_CODE_200_OK = 200, HTTP_STATUS_CODE_201_CREATED = 201, HTTP_STATUS_CODE_202_ACCEPTED = 202, HTTP_STATUS_CODE_203_NON_AUTHORITATIVE = 203, HTTP_STATUS_CODE_204_NO_CONTENT = 204, HTTP_STATUS_CODE_205_RESET_CONTENT = 205,
			HTTP_STATUS_CODE_206_PARTIAL_CONTENT = 206, HTTP_STATUS_CODE_300_MULTIPLE_CHOICES = 300, HTTP_STATUS_CODE_301_MOVED_PERMANENTLY = 301, HTTP_STATUS_CODE_302_FOUND = 302, HTTP_STATUS_CODE_303_SEE_OTHER = 303, HTTP_STATUS_CODE_304_NOT_MODIFIED = 304, HTTP_STATUS_CODE_305_USE_PROXY = 305, HTTP_STATUS_CODE_307_TEMPORARY_REDIRECT = 307,
			HTTP_STATUS_CODE_400_BAD_REQUEST = 400, HTTP_STATUS_CODE_401_UNAUTHORIZED = 401, HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 402, HTTP_STATUS_CODE_403_FORBIDDEN = 403, HTTP_STATUS_CODE_404_NOT_FOUND = 404, HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 405, HTTP_STATUS_CODE_406_NOT_ACCEPTABLE = 406, HTTP_STATUS_CODE_407_PROXY_AUTH_REQUIRED = 407,
			HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 408, HTTP_STATUS_CODE_409_CONFLICT = 409, HTTP_STATUS_CODE_410_GONE = 410, HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 411, HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 412, HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 413, HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 414, HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 415,
			HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416, HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 417, HTTP_STATUS_CODE_4XX_UNKNOWN = 418, HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS = 429, HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 500, HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 501, HTTP_STATUS_CODE_502_BAD_GATEWAY = 502,
			HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 503, HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 504, HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 505, HTTP_STATUS_CODE_5XX_UNKNOWN = 599
		};

		// Input enums
		enum InputActionOrigin {
			INPUT_ACTION_ORIGIN_NONE = 0, INPUT_ACTION_ORIGIN_A = 1, INPUT_ACTION_ORIGIN_B = 2, INPUT_ACTION_ORIGIN_X = 3, INPUT_ACTION_ORIGIN_Y = 4, INPUT_ACTION_ORIGIN_LEFT_BUMPER = 5, INPUT_ACTION_ORIGIN_RIGHT_BUMPER = 6, INPUT_ACTION_ORIGIN_LEFTGRIP = 7, INPUT_ACTION_ORIGIN_RIGHTGRIP = 8, INPUT_ACTION_ORIGIN_START = 9, INPUT_ACTION_ORIGIN_BACK = 10,
			INPUT_ACTION_ORIGIN_LEFT_PAD_TOUCH = 11, INPUT_ACTION_ORIGIN_LEFT_PAD_SWIPE = 12, INPUT_ACTION_ORIGIN_LEFT_PAD_CLICK = 13, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_NORTH = 14, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_SOUTH = 15, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_WEST = 16, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_EAST = 17, INPUT_ACTION_ORIGIN_RIGHT_PAD_TOUCH = 18,
			INPUT_ACTION_ORIGIN_RIGHT_PAD_SWIPE = 19, INPUT_ACTION_ORIGIN_RIGHT_PAD_CLICK = 20, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_NORTH = 21, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_SOUTH = 22, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_WEST = 23, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_EAST = 24, INPUT_ACTION_ORIGIN_LEFT_TRIGGER_PULL = 25, INPUT_ACTION_ORIGIN_LEFT_TRIGGER_CLICK = 26,
			INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_PULL = 27, INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_CLICK = 28, INPUT_ACTION_ORIGIN_LEFT_STICK_MOVE = 29, INPUT_ACTION_ORIGIN_LEFT_STICK_CLICK = 30, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_NORTH = 31, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_SOUTH = 32, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_WEST = 33,
			INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_EAST = 34, INPUT_ACTION_ORIGIN_GYRO_MOVE = 35, INPUT_ACTION_ORIGIN_GYRO_PITCH = 36, INPUT_ACTION_ORIGIN_GYRO_YAW = 37, INPUT_ACTION_ORIGIN_GYRO_ROLL = 38, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED0 = 39, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED1 = 40, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED2 = 41,
			INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED3 = 42, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED4 = 43, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED5 = 44, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED6 = 45, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED7 = 46, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED8 = 47,
			INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED9 = 48, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED10 = 49, INPUT_ACTION_ORIGIN_PS4_X = 50, INPUT_ACTION_ORIGIN_PS4_CIRCLE = 51, INPUT_ACTION_ORIGIN_PS4_TRIANGLE = 52, INPUT_ACTION_ORIGIN_PS4_SQUARE = 53, INPUT_ACTION_ORIGIN_PS4_LEFT_BUMPER = 54, INPUT_ACTION_ORIGIN_PS4_RIGHT_BUMPER = 55,
			INPUT_ACTION_ORIGIN_PS4_OPTIONS = 56, INPUT_ACTION_ORIGIN_PS4_SHARE = 57, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_TOUCH = 58, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_SWIPE = 59, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_CLICK = 60, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_NORTH = 61, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_SOUTH = 62, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_WEST = 63,
			INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_EAST = 64, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_TOUCH = 65, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_SWIPE = 66, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_CLICK = 67, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_NORTH = 68, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_SOUTH = 69, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_WEST = 70,
			INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_EAST = 71, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_TOUCH = 72, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_SWIPE = 73, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_CLICK = 74, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_NORTH = 75, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_SOUTH = 76, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_WEST = 77,
			INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_EAST = 78, INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_PULL = 79, INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_CLICK = 80, INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_PULL = 81, INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_CLICK = 82, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_MOVE = 83, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_CLICK = 84,
			INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_NORTH = 85, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_SOUTH = 86, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_WEST = 87, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_EAST = 88, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_MOVE = 89, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_CLICK = 90, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_NORTH = 91,
			INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_SOUTH = 92, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_WEST = 93, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_EAST = 94, INPUT_ACTION_ORIGIN_PS4_DPAD_NORTH = 95, INPUT_ACTION_ORIGIN_PS4_DPAD_SOUTH = 96, INPUT_ACTION_ORIGIN_PS4_DPAD_WEST = 97, INPUT_ACTION_ORIGIN_PS4_DPAD_EAST = 98, INPUT_ACTION_ORIGIN_PS4_GYRO_MOVE = 99,
			INPUT_ACTION_ORIGIN_PS4_GYRO_PITCH = 100, INPUT_ACTION_ORIGIN_PS4_GYRO_YAW = 101, INPUT_ACTION_ORIGIN_PS4_GYRO_ROLL = 102, INPUT_ACTION_ORIGIN_PS4_RESERVED0 = 103, INPUT_ACTION_ORIGIN_PS4_RESERVED1 = 104, INPUT_ACTION_ORIGIN_PS4_RESERVED2 = 105, INPUT_ACTION_ORIGIN_PS4_RESERVED3 = 106, INPUT_ACTION_ORIGIN_PS4_RESERVED4 = 107,
			INPUT_ACTION_ORIGIN_PS4_RESERVED5 = 108, INPUT_ACTION_ORIGIN_PS4_RESERVED6 = 109, INPUT_ACTION_ORIGIN_PS4_RESERVED7 = 110, INPUT_ACTION_ORIGIN_PS4_RESERVED8 = 111, INPUT_ACTION_ORIGIN_PS4_RESERVED9 = 112, INPUT_ACTION_ORIGIN_PS4_RESERVED10 = 113, INPUT_ACTION_ORIGIN_XBOX_ONE_A = 114, INPUT_ACTION_ORIGIN_XBOX_ONE_B = 115, INPUT_ACTION_ORIGIN_XBOX_ONE_X = 116,
			INPUT_ACTION_ORIGIN_XBOX_ONE_Y = 117, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_BUMPER = 118, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_BUMPER = 119, INPUT_ACTION_ORIGIN_XBOX_ONE_MENU = 120, INPUT_ACTION_ORIGIN_XBOX_ONE_VIEW = 121, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_PULL = 122, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_CLICK = 123,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_PULL = 124, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_CLICK = 125, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_MOVE = 126, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_CLICK = 127, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_NORTH = 128, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_SOUTH = 129,
			INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_WEST = 130, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_EAST = 131, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_MOVE = 132, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_CLICK = 133, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_NORTH = 134, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_SOUTH = 135,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_WEST = 136, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_EAST = 137, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_NORTH = 138, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_SOUTH = 139, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_WEST = 140, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_EAST = 141, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED0 = 142,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED1 = 143, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED2 = 144, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED3 = 145, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED4 = 146, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED5 = 147, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED6 = 148, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED7 = 149,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED8 = 150, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED9 = 151, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED10 = 152, INPUT_ACTION_ORIGIN_XBOX_360_A = 153, INPUT_ACTION_ORIGIN_XBOX_360_B = 154, INPUT_ACTION_ORIGIN_XBOX_360_X = 155, INPUT_ACTION_ORIGIN_XBOX_360_Y = 156, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_BUMPER = 157,
			INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_BUMPER = 158, INPUT_ACTION_ORIGIN_XBOX_360_START = 159, INPUT_ACTION_ORIGIN_XBOX_360_BACK = 160, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_PULL = 161, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_CLICK = 162, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_PULL = 163, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_CLICK = 164,
			INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_MOVE = 165, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_CLICK = 166, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_NORTH = 167, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_SOUTH = 168, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_WEST = 169, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_EAST = 170,
			INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_MOVE = 171, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_CLICK = 172, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_NORTH = 173, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_SOUTH = 174, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_WEST = 175, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_EAST = 176,
			INPUT_ACTION_ORIGIN_XBOX_360_DPAD_NORTH = 177, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_SOUTH = 178, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_WEST = 179, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_EAST = 180, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED0 = 181, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED1 = 182, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED2 = 183,
			INPUT_ACTION_ORIGIN_XBOX_360_RESERVED3 = 184, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED4 = 185, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED5 = 186, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED6 = 187, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED7 = 188, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED8 = 189, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED9 = 190,
			INPUT_ACTION_ORIGIN_XBOX_360_RESERVED10 = 191, INPUT_ACTION_ORIGIN_SWITCH_A = 192, INPUT_ACTION_ORIGIN_SWITCH_B = 193, INPUT_ACTION_ORIGIN_SWITCH_X = 194, INPUT_ACTION_ORIGIN_SWITCH_Y = 195, INPUT_ACTION_ORIGIN_SWITCH_LEFT_BUMPER = 196, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_BUMPER = 197, INPUT_ACTION_ORIGIN_SWITCH_PLUS = 198,
			INPUT_ACTION_ORIGIN_SWITCH_MINUS = 199, INPUT_ACTION_ORIGIN_SWITCH_CAPTURE = 200, INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_PULL = 201, INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_CLICK = 202, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_PULL = 203, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_CLICK = 204, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_MOVE = 205,
			INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_CLICK = 206, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_NORTH = 207, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_SOUTH = 208, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_WEST = 209, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_EAST = 210, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_MOVE = 211,
			INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_CLICK = 212, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_NORTH = 213, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_SOUTH = 214, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_WEST = 215, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_EAST = 216, INPUT_ACTION_ORIGIN_SWITCH_DPAD_NORTH = 217,
			INPUT_ACTION_ORIGIN_SWITCH_DPAD_SOUTH = 218, INPUT_ACTION_ORIGIN_SWITCH_DPAD_WEST = 219, INPUT_ACTION_ORIGIN_SWITCH_DPAD_EAST = 220, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_MOVE = 221, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_PITCH = 222, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_YAW = 223, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_ROLL = 224,
			INPUT_ACTION_ORIGIN_SWITCH_RESERVED0 = 225, INPUT_ACTION_ORIGIN_SWITCH_RESERVED1 = 226, INPUT_ACTION_ORIGIN_SWITCH_RESERVED2 = 227, INPUT_ACTION_ORIGIN_SWITCH_RESERVED3 = 228, INPUT_ACTION_ORIGIN_SWITCH_RESERVED4 = 229, INPUT_ACTION_ORIGIN_SWITCH_RESERVED5 = 230, INPUT_ACTION_ORIGIN_SWITCH_RESERVED6 = 231, INPUT_ACTION_ORIGIN_SWITCH_RESERVED7 = 232,
			INPUT_ACTION_ORIGIN_SWITCH_RESERVED8 = 233, INPUT_ACTION_ORIGIN_SWITCH_RESERVED9 = 234, INPUT_ACTION_ORIGIN_SWITCH_RESERVED10 = 235, INPUT_ACTION_ORIGIN_COUNT = 258, INPUT_ACTION_ORIGIN_MAXIMUMPOSSIBLEVALUE = 32767
		};

		// Inventory enums
		enum SteamItemFlags {
			STEAM_ITEM_NO_TRADE = (1<<0), STEAM_ITEM_REMOVED = (1<<8), STEAM_ITEM_CONSUMED = (1<<9)
		};

		// Matchmaking enums
		enum ChatMemberStateChange {
			CHAT_MEMBER_STATE_CHANGE_ENTERED = 0X0001, CHAT_MEMBER_STATE_CHANGE_LEFT = 0X0002, CHAT_MEMBER_STATE_CHANGE_DISCONNECTED = 0X0004, CHAT_MEMBER_STATE_CHANGE_KICKED = 0X0008, CHAT_MEMBER_STATE_CHANGE_BANNED = 0X0010
		};
		enum LobbyComparison {
			LOBBY_COMPARISON_EQUAL_TO_OR_LESS_THAN = -2, LOBBY_COMPARISON_LESS_THAN = -1, LOBBY_COMPARISON_EQUAL = 0, LOBBY_COMPARISON_GREATER_THAN = 1, LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN = 2, LOBBY_COMPARISON_NOT_EQUAL = 3
		};
		enum LobbyDistanceFilter {
			LOBBY_DISTANCE_FILTER_CLOSE = 0, LOBBY_DISTANCE_FILTER_DEFAULT = 1, LOBBY_DISTANCE_FILTER_FAR = 2, LOBBY_DISTANCE_FILTER_WORLDWIDE = 3
		};
		enum LobbyType {
			LOBBY_TYPE_PRIVATE = 0, LOBBY_TYPE_FRIENDS_ONLY = 1, LOBBY_TYPE_PUBLIC = 2, LOBBY_TYPE_INVISIBLE = 3
		};

		// Matchmaking Servers enums
		enum MatchMakingServerResponse {
			SERVER_RESPONDED = 0, SERVER_FAILED_TO_RESPOND = 1, NO_SERVERS_LISTED_ON_MASTER_SERVER = 2
		};

		// Music enums
		enum AudioPlaybackStatus {
			AUDIO_PLAYBACK_UNDEFINED = 0, AUDIO_PLAYBACK_PLAYING = 1, AUDIO_PLAYBACK_PAUSED = 2, AUDIO_PLAYBACK_IDLE = 3
		};

		// Networking enums
		enum P2PSend {
			P2P_SEND_UNRELIABLE = 0, P2P_SEND_UNRELIABLE_NO_DELAY = 1, P2P_SEND_RELIABLE = 2, P2P_SEND_RELIABLE_WITH_BUFFERING = 3
		};
		enum P2PSessionError {
			P2P_SESSION_ERROR_NONE = 0, P2P_SESSION_ERROR_NOT_RUNNING_APP = 1, P2P_SESSION_ERROR_NO_RIGHTS_TO_APP = 2, P2P_SESSION_ERROR_DESTINATION_NOT_LOGGED_ON = 3, P2P_SESSION_ERROR_TIMEOUT = 4, P2P_SESSION_ERROR_MAX = 5
		};
		enum SNetSocketConnectionType {
			NET_SOCKET_CONNECTION_TYPE_NOT_CONNECTED = 0, NET_SOCKET_CONNECTION_TYPE_UDP = 1, NET_SOCKET_CONNECTION_TYPE_UDP_RELAY = 2
		};
		enum SNetSocketState {
			NET_SOCKET_STATE_INVALID = 0, NET_SOCKET_STATE_CONNECTED = 1, NET_SOCKET_STATE_INITIATED = 10, NET_SOCKET_STATE_LOCAL_CANDIDATE_FOUND = 11, NET_SOCKET_STATE_RECEIVED_REMOTE_CANDIDATES = 12, NET_SOCKET_STATE_CHALLENGE_HANDSHAKE = 15, NET_SOCKET_STATE_DISCONNECTING = 21, NET_SOCKET_STATE_LOCAL_DISCONNECT = 22, NET_SOCKET_STATE_TIMEOUT_DURING_CONNECT = 23,
			NET_SOCKET_STATE_REMOTE_END_DISCONNECTED = 24, NET_SOCKET_STATE_BROKEN = 25
		};

		// Networking Sockets enums
		enum NetworkingConfigValue {
			NETWORKING_CONFIG_INVALID = 0, NETWORKING_CONFIG_FAKE_PACKET_LOSS_SEND = 2, NETWORKING_CONFIG_FAKE_PACKET_LOSS_RECV = 3, NETWORKING_CONFIG_FAKE_PACKET_LAG_SEND = 4, NETWORKING_CONFIG_FAKE_PACKET_LAG_RECV = 5, NETWORKING_CONFIG_FAKE_PACKET_REORDER_SEND = 6, NETWORKING_CONFIG_FAKE_PACKET_REORDER_RECV = 7, NETWORKING_CONFIG_FAKE_PACKET_REORDER_TIME = 8,
			NETWORKING_CONFIG_FAKE_PACKET_DUP_SEND = 26, NETWORKING_CONFIG_FAKE_PACKET_DUP_REVC = 27, NETWORKING_CONFIG_FAKE_PACKET_DUP_TIME_MAX = 28, NETWORKING_CONFIG_TIMEOUT_INITIAL = 24, NETWORKING_CONFIG_TIMEOUT_CONNECTED = 25, NETWORKING_CONFIG_SEND_BUFFER_SIZE = 9, NETWORKING_CONFIG_SEND_RATE_MIN = 10, NETWORKING_CONFIG_SEND_RATE_MAX = 11,
			NETWORKING_CONFIG_NAGLE_TIME = 12, NETWORKING_CONFIG_IP_ALLOW_WITHOUT_AUTH = 23, NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL_INITIAL = 19, NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL = 20, NETWORKING_CONFIG_SDR_CLIENT_MIN_PINGS_BEFORE_PING_ACCURATE = 21, NETWORKING_CONFIG_SDR_CLIENT_SINGLE_SOCKET = 22,
			NETWORKING_CONFIG_SDR_CLIENT_FORCE_RELAY_CLUSTER = 29, NETWORKING_CONFIG_SDR_CLIENT_DEBUG_TICKET_ADDRESS = 30, NETWORKING_CONFIG_SDR_CLIENT_FORCE_PROXY_ADDR = 31, NETWORKING_CONFIG_LOG_LEVEL_ACK_RTT = 13, NETWORKING_CONFIG_LOG_LEVEL_PACKET_DECODE = 14, NETWORKING_CONFIG_LOG_LEVEL_MESSAGE = 15, NETWORKING_CONFIG_LOG_LEVEL_PACKET_GAPS = 16,
			NETWORKING_CONFIG_LOG_LEVEL_P2P_RENDEZVOUS = 17, NETWORKING_CONFIG_LOG_LEVEL_SRD_RELAY_PINGS = 18
		};
		enum NetworkingGetConfigValueResult {
			NETWORKING_GET_CONFIG_VALUE_BAD_VALUE = -1, NETWORKING_GET_CONFIG_VALUE_BAD_SCOPE_OBJ = -2, NETWORKING_GET_CONFIG_VALUE_BUFFER_TOO_SMALL = -3, NETWORKING_GET_CONFIG_VALUE_OK = 1, NETWORKING_GET_CONFIG_VALUE_OK_INHERITED = 2, NETWORKING_GET_CONFIG_VALUE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConnectionState {
			CONNECTION_STATE_NONE = 0, CONNECTION_STATE_CONNECTING = 1, CONNECTION_STATE_FINDING_ROUTE = 2, CONNECTION_STATE_CONNECTED = 3, CONNECTION_STATE_CLOSED_BY_PEER = 4, CONNECTION_STATE_PROBLEM_DETECTED_LOCALLY = 5, CONNECTION_STATE_FIN_WAIT = -1, CONNECTION_STATE_LINGER = -2, CONNECTION_STATE_DEAD = -3, CONNECTION_STATE_FORCE32BIT = 0x7fffffff
		};
		enum NetworkingConnectionEnd {
			CONNECTION_END_INVALID = 0, CONNECTION_END_APP_MIN = 1000, CONNECTION_END_MAX = 1999, CONNECTION_END_APP_EXCEPTION_MIN = 2000, CONNECTION_END_APP_EXCEPTION_MAX = 2999, CONNECTION_END_LOCAL_MIN = 3000, CONNECTION_END_LOCAL_OFFLINE_MODE = 3001, CONNECTION_END_LOCAL_MANY_RELAY_CONNECTIVITY = 3002, CONNECTION_END_LOCAL_HOSTED_sERVER_PRIMARY_RELAY = 3003,
			CONNECTION_END_LOCAL_NETWORK_CONFIG = 3004, CONNECTION_END_LOCAL_RIGHTS = 3005, CONNECTION_END_LOCAL_MAX = 3999, CONNECTION_END_REMOVE_MIN = 4000, CONNECTION_END_REMOTE_TIMEOUT = 4001, CONNECTION_END_REMOTE_BAD_CRYPT = 4002, CONNECTION_END_REMOTE_BAD_CERT = 4003, CONNECTION_END_REMOTE_NOT_LOGGED_IN = 4004, CONNECTION_END_REMOTE_NOT_RUNNING_APP = 4005,
			CONNECTION_END_BAD_PROTOCOL_VERSION = 4006, CONNECTION_END_REMOTE_MAX = 4999, CONNECTION_END_MISC_MIN = 5000, CONNECTION_END_MISC_GENERIC = 5001, CONNECTION_END_MISC_INTERNAL_ERROR = 5002, CONNECTION_END_MISC_TIMEOUT = 5003, CONNECTION_END_MISC_RELAY_CONNECTIVITY = 5004, CONNECTION_END_MISC_STEAM_CONNECTIVITY = 5005,
			CONNECTION_END_MISC_NO_RELAY_SESSIONS_TO_CLIENT = 5006, CONNECTION_END_MISC_MAX = 5999
		};
		enum NetworkingIdentityType {
			IDENTITY_TYPE_INVALID = 0, IDENTITY_TYPE_STEAMID = 16, IDENTITY_TYPE_IP_ADDRESS = 1, IDENTITY_TYPE_GENERIC_STRING = 2, IDENTITY_TYPE_GENERIC_BYTES = 3, IDENTITY_TYPE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingSocketsDebugOutputType {
			NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_NONE = 0, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_BUG = 1, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_ERROR = 2, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_IMPORTANT = 3, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_WARNING = 4, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_MSG = 5, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_VERBOSE = 6,
			NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_DEBUG = 7, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_EVERYTHING = 8, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_FORCE_32BIT = 0x7fffffff
		};

		// Networking Utils enums {
		enum NetworkingAvailability {
			NETWORKING_AVAILABILITY_CANNOT_TRY = -102, NETWORKING_AVAILABILITY_FAILED = -101, NETWORKING_AVAILABILITY_PREVIOUSLY = -100, NETWORKING_AVAILABILITY_NEVER_TRIED = 1, NETWORKING_AVAILABILITY_WAITING = 2, NETWORKING_AVAILABILITY_ATTEMPTING = 3, NETWORKING_AVAILABILITY_CURRENT = 100, NETWORKING_AVAILABILITY_UNKNOWN = 0,
			NETWORKING_AVAILABILITY_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConfigScope {
			NETWORKING_CONFIG_SCOPE_GLOBAL = 1, NETWORKING_CONFIG_SCOPE_SOCKETS_INTERFACE = 2, NETWORKING_CONFIG_SCOPE_LISTEN_SOCKET = 3, NETWORKING_CONFIG_SCOPE_CONNECTION = 4, NETWORKING_CONFIG_SCOPE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConfigDataType {
			NETWORKING_CONFIG_TYPE_INT32 = 1, NETWORKING_CONFIG_TYPE_INT64 = 2, NETWORKING_CONFIG_TYPE_FLOAT = 3, NETWORKING_CONFIG_TYPE_STRING = 4, NETWORKING_CONFIG_TYPE_FUNCTION_PTR = 5, NETWORKING_CONFIG_TYPE_FORCE_32BIT = 0x7fffffff
		};

		// Steam Parties enums
		enum SteamPartyBeaconLocationType {
			STEAM_PARTY_BEACON_LOCATIONTYPE_INVALID = 0, STEAM_PARTY_BEACON_LOCATIONTYPE_CHAT_GROUP = 1, STEAM_PARTY_BEACON_LOCATION_TYPE_MAX
		};
		enum SteamPartyBeaconLocationData {
			STEAM_PARTY_BEACON_LOCATION_DATA = 0, STEAM_PARTY_BEACON_LOCATION_DATA_NAME = 1, STEAM_PARTY_BEACON_LOCATION_DATA_URL_SMALL, STEAM_PARTY_BEACON_LOCATION_DATA_URL_MEDIUM, STEAM_PARTY_BEACON_LOCATION_DATA_URL_LARGE
		};

		// Remote Storage enums
		enum RemoteStoragePlatform {
			REMOTE_STORAGE_PLATFORM_NONE = 0, REMOTE_STORAGE_PLATFORM_WINDOWS = (1<<0), REMOTE_STORAGE_PLATFORM_OSX = (1<<1), REMOTE_STORAGE_PLATFORM_PS3 = (1<<2), REMOTE_STORAGE_PLATFORM_LINUX = (1<<3), REMOTE_STORAGE_PLATFORM_RESERVED2 = (1<<4), REMOTE_STORAGE_PLATFORM_ALL = 0XFFFFFFFF
		};
		enum RemoteStoragePublishedFileVisibility {
			REMOTE_STORAGE_PUBLISHED_VISIBLITY_PUBLIC = 0, REMOTE_STORAGE_PUBLISHED_VISIBLITY_FRIENDS_ONLY = 1, REMOTE_STORAGE_PUBLISHED_VISIBLITY_PRIVATE = 2
		};
		enum UGCReadAction {
			UGC_READ_CONTINUE_READING_UNTIL_FINISHED = 0, UGC_READ_CONTINUE_READING = 1, UGC_READ_CLOSE = 2
		};
		enum WorkshopEnumerationType {
			WORKSHOP_ENUMERATION_TYPE_RANKED_BY_VOTE = 0, WORKSHOP_ENUMERATION_TYPE_RECENT = 1, WORKSHOP_ENUMERATION_TYPE_TRENDING = 2, WORKSHOP_ENUMERATION_TYPE_FAVORITES_OF_FRIENDS = 3, WORKSHOP_ENUMERATION_TYPE_VOTED_BY_FRIENDS = 4, WORKSHOP_ENUMERATION_TYPE_CONTENT_BY_FRIENDS = 5, WORKSHOP_ENUMERATION_TYPE_RECENT_FROM_FOLLOWED_USERS = 6
		};
		enum WorkshopFileAction {
			WORKSHOP_FILE_ACTION_PLAYED = 0, WORKSHOP_FILE_ACTION_COMPLETED = 1
		};
		enum WorkshopFileType {
			WORKSHOP_FILE_TYPE_FIRST = 0, WORKSHOP_FILE_TYPE_COMMUNITY = 0, WORKSHOP_FILE_TYPE_MICROTRANSACTION = 1, WORKSHOP_FILE_TYPE_COLLECTION = 2, WORKSHOP_FILE_TYPE_ART = 3, WORKSHOP_FILE_TYPE_VIDEO = 4, WORKSHOP_FILE_TYPE_SCREENSHOT = 5, WORKSHOP_FILE_TYPE_GAME = 6, WORKSHOP_FILE_TYPE_SOFTWARE = 7, WORKSHOP_FILE_TYPE_CONCEPT = 8, WORKSHOP_FILE_TYPE_WEB_GUIDE = 9,
			WORKSHOP_FILE_TYPE_INTEGRATED_GUIDE = 10, WORKSHOP_FILE_TYPE_MERCH = 11, WORKSHOP_FILE_TYPE_CONTROLLER_BINDING = 12, WORKSHOP_FILE_TYPE_STEAMWORKS_ACCESS_INVITE = 13, WORKSHOP_FILE_TYPE_STEAM_VIDEO = 14, WORKSHOP_FILE_TYPE_GAME_MANAGED_ITEM = 15, WORKSHOP_FILE_TYPE_MAX = 16
		};
		enum WorkshopVideoProvider {
			WORKSHOP_VIDEO_PROVIDER_NONE = 0, WORKSHOP_VIDEO_PROVIDER_YOUTUBE = 1
		};
		enum WorkshopVote {
			WORKSHOP_VOTE_UNVOTED = 0, WORKSHOP_VOTE_FOR = 1, WORKSHOP_VOTE_AGAINST = 2, WORKSHOP_VOTE_LATER = 3
		};

		// Screenshot enums
		enum VRScreenshotType {
			VR_SCREENSHOT_TYPE_NONE = 0, VR_SCREENSHOT_TYPE_MONO = 1, VR_SCREENSHOT_TYPE_STEREO = 2, VR_SCREENSHOT_TYPE_MONO_CUBE_MAP = 3, VR_SCREENSHOT_TYPE_MONO_PANORAMA = 4, VR_SCREENSHOT_TYPE_STEREO_PANORAMA = 5
		};

		// UGC enums
		enum ItemPreviewType {
			ITEM_PREVIEW_TYPE_IMAGE = 0, ITEM_PREVIEW_TYPE_YOUTUBE_VIDEO = 1, ITEM_PREVIEW_TYPE_SKETCHFAB = 2, ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_HORIZONTAL_CROSS = 3, ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_LAT_LONG = 4, ITEM_PREVIEW_TYPE_RESERVED_MAX = 255
		};
		enum ItemState {
			ITEM_STATE_NONE = 0, ITEM_STATE_SUBSCRIBED = 1, ITEM_STATE_LEGACY_ITEM = 2, ITEM_STATE_INSTALLED = 4, ITEM_STATE_NEEDS_UPDATE = 8, ITEM_STATE_DOWNLOADING = 16, ITEM_STATE_DOWNLOAD_PENDING = 32
		};
		enum ItemStatistic {
			ITEM_STATISTIC_NUM_SUBSCRIPTIONS = 0, ITEM_STATISTIC_NUM_FAVORITES = 1, ITEM_STATISTIC_NUM_FOLLOWERS = 2, ITEM_STATISTIC_NUM_UNIQUE_SUBSCRIPTIONS = 3, ITEM_STATISTIC_NUM_UNIQUE_FAVORITES = 4, ITEM_STATISTIC_NUM_UNIQUE_FOLLOWERS = 5, ITEM_STATISTIC_NUM_UNIQUE_WEBSITE_VIEWS = 6, ITEM_STATISTIC_REPORT_SCORE = 7, ITEM_STATISTIC_NUM_SECONDS_PLAYED = 8,
			ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS = 9, ITEM_STATISTIC_NUM_COMMENTS = 10, ITEM_STATISTIC_NUM_SECONDS_PLAYED_DURING_TIME_PERIOD = 11, ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS_DURING_TIME_PERIOD = 12
		};
		enum ItemUpdateStatus {
			ITEM_UPDATE_STATUS_INVALID = 0, ITEM_UPDATE_STATUS_PREPARING_CONFIG = 1, ITEM_UPDATE_STATUS_PREPARING_CONTENT = 2, ITEM_UPDATE_STATUS_UPLOADING_CONTENT = 3, ITEM_UPDATE_STATUS_UPLOADING_PREVIEW_FILE = 4, ITEM_UPDATE_STATUS_COMMITTING_CHANGES = 5
		};
		enum UGCMatchingUGCType {
			UGCMATCHINGUGCTYPE_ITEMS = 0, UGC_MATCHING_UGC_TYPE_ITEMS_MTX = 1, UGC_MATCHING_UGC_TYPE_ITEMS_READY_TO_USE = 2, UGC_MATCHING_UGC_TYPE_COLLECTIONS = 3, UGC_MATCHING_UGC_TYPE_ARTWORK = 4, UGC_MATCHING_UGC_TYPE_VIDEOS = 5, UGC_MATCHING_UGC_TYPE_SCREENSHOTS = 6, UGC_MATCHING_UGC_TYPE_ALL_GUIDES = 7, UGC_MATCHING_UGC_TYPE_WEB_GUIDES = 8,
			UGC_MATCHING_UGC_TYPE_INTEGRATED_GUIDES = 9, UGC_MATCHING_UGC_TYPE_USABLE_IN_GAME = 10, UGC_MATCHING_UGC_TYPE_CONTROLLER_BINDINGS = 11, UGC_MATCHING_UGC_TYPE_GAME_MANAGED_ITEMS = 12, UGC_MATCHING_UGC_TYPE_ALL = ~0
		};
		enum UGCQuery {
			UGCQUERY_RANKED_BY_VOTE = 0, UGC_QUERY_RANKED_BY_PUBLICATION_DATE = 1, UGC_QUERY_ACCEPTED_FOR_GAME_RANKED_BY_ACCEPTANCE_DATE = 2, UGC_QUERY_RANKED_BY_TREND = 3, UGC_QUERY_FAVORITED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE = 4, UGC_QUERY_CREATED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE = 5, UGC_QUERY_RANKED_BY_NUM_TIMES_REPORTED = 6,
			UGC_QUERY_CREATED_BY_FOLLOWED_USERS_RANKED_BY_PUBLICATION_DATE = 7, UGC_QUERY_NOT_YET_RATED = 8, UGC_QUERY_RANKED_BY_TOTAL_VOTES_ASC = 9, UGC_QUERY_RANKED_BY_VOTES_UP = 10, UGC_QUERY_RANKED_BY_TEXT_SEARCH = 11, UGC_QUERY_RANKED_BY_TOTAL_UNIQUE_SUBSCRIPTIONS = 12, UGC_QUERY_RANKED_BY_PLAYTIME_TREND = 13, UGC_QUERY_RANKED_BY_TOTAL_PLAYTIME = 14,
			UGC_QUERY_RANKED_BY_AVERAGE_PLAYTIME_TREND = 15, UGC_QUERY_RANKED_BY_LIFETIME_AVERAGE_PLAYTIME = 16, UGC_QUERY_RANKED_BY_PLAYTIME_SESSIONS_TREND = 17, UGCQUERY_RANKED_BY_LIFETIME_PLAYTIME_SESSIONS = 18
		};
		enum UserUGCList {
			USER_UGC_LIST_PUBLISHED = 0, USER_UGC_LIST_VOTED_ON = 1, USER_UGC_LIST_VOTED_UP = 2, USER_UGC_LIST_VOTED_DOWN = 3, USER_UGC_LIST_FAVORITED = 5, USER_UGC_LIST_SUBSCRIBED = 6, USER_UGC_LIST_USED_OR_PLAYED = 7, USER_UGC_LIST_FOLLOWED = 8
		};
		enum UserUGCListSortOrder {
			USERUGCLISTSORTORDER_CREATIONORDERDESC = 0, USERUGCLISTSORTORDER_CREATIONORDERASC = 1, USERUGCLISTSORTORDER_TITLEASC = 2, USERUGCLISTSORTORDER_LASTUPDATEDDESC = 3, USERUGCLISTSORTORDER_SUBSCRIPTIONDATEDESC = 4, USERUGCLISTSORTORDER_VOTESCOREDESC = 5, USERUGCLISTSORTORDER_FORMODERATION = 6
		};

		// User enums
		enum FailureType {
			FAILURE_FLUSHED_CALLBACK_QUEUE = 0, FAILURE_PIPE_FAIL = 1
		};
		enum DurationControlProgress {
			DURATION_CONTROL_PROGRESS_FULL = 0, DURATION_CONTROL_PROGRESS_HALF = 1, DURATION_CONTROL_PROGRESS_NONE = 2
		};
		enum DurationControlNotification {
			DURATION_CONTROL_NOTIFICATION_NONE = 0, DURATION_CONTROL_NOTIFICATION_1_HOUR = 1, DURATION_CONTROL_NOTIFICATION_3_HOURS = 3, DURATION_CONTROL_NOTIFICATION_HALF_PROGRESS = 3, DURATION_CONTROL_NOTIFICATION_NO_PROGRESS = 4
		};

		// User Stats enums
		enum LeaderboardDataRequest {
			LEADERBOARD_DATA_REQUEST_GLOBAL = 0, LEADERBOARD_DATA_REQUEST_GLOBAL_AROUND_USER = 1, LEADERBOARD_DATA_REQUEST_FRIENDS = 2, LEADERBOARD_DATA_REQUEST_USERS = 3
		};
		enum LeaderboardDisplayType {
			LEADERBOARD_DISPLAY_TYPE_NONE = 0, LEADERBOARD_DISPLAY_TYPE_NUMERIC = 1, LEADERBOARD_DISPLAY_TYPE_TIME_SECONDS = 2, LEADERBOARD_DISPLAY_TYPE_TIME_MILLISECONDS = 3
		};
		enum LeaderboardSortMethod {
			LEADERBOARD_SORT_METHOD_NONE = 0, LEADERBOARD_SORT_METHOD_ASCENDING = 1, LEADERBOARD_SORT_METHOD_DESCENDING = 2
		};
		enum LeaderboardUploadScoreMethod {
			LEADERBOARD_UPLOAD_SCORE_METHOD = 0, LEADERBOARD_UPLOAD_SCORE_METHOD_KEEP_BEST = 1, LEADERBOARD_UPLOAD_SCORE_METHOD_FORCE_UPDATE = 2
		};

		// Utils enums
		enum CheckFileSignature {
			CHECK_FILE_SIGNATURE_INVALID_SIGNATURE = 0, CHECK_FILE_SIGNATURE_VALID_SIGNATURE = 1, CHECK_FILE_SIGNATURE_FILE_NOT_FOUND = 2, CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_APP = 3, CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_FILE = 4
		};
		enum GamepadTextInputLineMode {
			GAMEPAD_TEXT_INPUT_LINE_MODE_SINGLE_LINE = 0, GAMEPAD_TEXT_INPUT_LINE_MODE_MULTIPLE_LINES = 1
		};
		enum GamepadTextInputMode {
			GAMEPAD_TEXT_INPUT_MODE_NORMAL = 0, GAMEPAD_TEXT_INPUT_MODE_PASSWORD = 1
		};
		enum SteamAPICallFailure {
			STEAM_API_CALL_FAILURE_NONE = -1, STEAM_API_CALL_FAILURE_STEAM_GONE = 0, STEAM_API_CALL_FAILURE_NETWORK_FAILURE = 1, STEAM_API_CALL_FAILURE_INVALID_HANDLE = 2, STEAM_API_CALL_FAILURE_MISMATCHED_CALLBACK = 3
		};
		enum TextFilteringContext {
			TEXT_FILTERING_CONTEXT_UNKNOWN = 0, TEXT_FILTERING_CONTEXT_GAME_CONTENT = 1, TEXT_FILTERING_CONTEXT_CHAT = 2, TEXT_FILTERING_CONTEXT_NAME = 3
		};
		
		static Steam* get_singleton();
		Steam();
		~Steam();

		/////////////////////////////////////////
		// STEAMWORKS FUNCTIONS /////////////////
		/////////////////////////////////////////
		//
		CSteamID createSteamID(uint32_t steamID, int accountType=-1);

		// Main /////////////////////////////////
		bool restartAppIfNecessary(int value);
		Dictionary steamInit(bool retrieve_stats=true);
		bool isSteamRunning();
		void steamworksError(const String& failed_signal);

		// Apps /////////////////////////////////
		Array getDLCDataByIndex();
		bool isAppInstalled(int value);
		bool isCybercafe();
		bool isDLCInstalled(int value);
		bool isLowViolence();
		bool isSubscribed();
		bool isSubscribedApp(int value);
		bool isSubscribedFromFamilySharing();
		bool isSubscribedFromFreeWeekend();
		Dictionary isTimedTrial();
		bool isVACBanned();
		int getAppBuildId();
		String getAppInstallDir(AppId_t appID);
		uint64_t getAppOwner();
		String getAvailableGameLanguages();
		String getCurrentBetaName();
		String getCurrentGameLanguage();
		int getDLCCount();
		Dictionary getDLCDownloadProgress(uint32_t appID);
		int getEarliestPurchaseUnixTime(int value);
		void getFileDetails(const String& filename);
		Array getInstalledDepots(uint32_t appID);
		String getLaunchCommandLine();
		String getLaunchQueryParam(const String& key);
		void installDLC(int value);
		bool markContentCorrupt(bool missingFilesOnly);
		void uninstallDLC(int value);
		
		// Friends //////////////////////////////
		void activateGameOverlay(const String& type);
		void activateGameOverlayInviteDialog(uint64_t steamID);
		void activateGameOverlayInviteDialogConnectString(const String& connectString);
		void activateGameOverlayToStore(uint32_t appID=0);
		void activateGameOverlayToUser(const String& type, uint64_t steamID);
		void activateGameOverlayToWebPage(const String& url);
		void clearRichPresence();
		bool closeClanChatWindowInSteam(uint64_t chatID);
		void downloadClanActivityCounts(uint64_t clanID, int clansToRequest);
		void enumerateFollowingList(uint32 startIndex);
		uint64_t getChatMemberByIndex(uint64_t clanID, int user);
		Dictionary getClanActivityCounts(uint64_t clanID);
		uint64_t getClanByIndex(int clan);
		int getClanChatMemberCount(uint64_t clanID);
		Dictionary getClanChatMessage(uint64_t chatID, int message);
		int getClanCount();
		String getClanName(uint64_t clanID);
		uint64_t getClanOfficerByIndex(uint64_t clanID, int officer);
		int getClanOfficerCount(uint64_t clanID);
		uint64_t getClanOwner(uint64_t clanID);
		String getClanTag(uint64_t clanID);
		uint64_t getCoplayFriend(int friendNum);
		int getCoplayFriendCount();
		void getFollowerCount(uint64_t steamID);
		uint64_t getFriendByIndex(int friendNum, int friendFlags);
		int getFriendCoplayGame(uint64_t friendID);
		int getFriendCoplayTime(uint64_t friendID);
		int getFriendCount();
		int getFriendCountFromSource(uint64_t clanID);
		uint64_t getFriendFromSourceByIndex(uint64_t sourceID, int friendNum);
		Dictionary getFriendGamePlayed(uint64_t steamID);
		Dictionary getFriendMessage(uint64_t friendID, int message);
		String getFriendPersonaName(uint64_t steamID);
		String getFriendPersonaNameHistory(uint64_t steamID, int nameHistory);
		int getFriendPersonaState(uint64_t steamID);
		int getFriendRelationship(uint64_t steamID);
		String getFriendRichPresence(uint64_t friendID, const String& key);
		int getFriendRichPresenceKeyCount(uint64_t friendID);
		String getFriendRichPresenceKeyByIndex(uint64_t friendID, int key);		
		int getFriendsGroupCount();
		int getFriendsGroupIDByIndex(int friendGroup);
		int getFriendsGroupMembersCount(int friendGroup);
		Array getFriendsGroupMembersList(int friendGroup, int memberCount);
		String getFriendsGroupName(int friendGroup);
		int getFriendSteamLevel(uint64_t steamID);
		int getLargeFriendAvatar(uint64_t steamID);
		int getMediumFriendAvatar(uint64_t steamID);
		String getPersonaName();
		int getPersonaState();
		void getPlayerAvatar(int size=2, uint64_t steamID=0);
		String getPlayerNickname(uint64_t steamID);
		Array getRecentPlayers();
		int getSmallFriendAvatar(uint64_t steamID);
		Array getUserFriendsGroups();
		uint32 getUserRestrictions();
		Array getUserSteamFriends();
		Array getUserSteamGroups();
		bool hasFriend(uint64_t steamID, int friendFlags);
		bool inviteUserToGame(uint64_t friendID, const String& connectString);
		bool isClanChatAdmin(uint64_t chatID, uint64_t steamID);
		bool isClanPublic(uint64_t clanID);
		bool isClanOfficialGameGroup(uint64_t clanID);
		bool isClanChatWindowOpenInSteam(uint64_t chatID);
		void isFollowing(uint64_t steamID);
		bool isUserInSource(uint64_t steamID, uint64_t sourceID);
		void joinClanChatRoom(uint64_t clanID);
		bool leaveClanChatRoom(uint64_t clanID);
		bool openClanChatWindowInSteam(uint64_t chatID);
		bool registerProtocolInOverlayBrowser(const String& protocol);
		bool replyToFriendMessage(uint64_t steamID, const String& message);
		void requestClanOfficerList(uint64_t clanID);
		void requestFriendRichPresence(uint64_t friendID);
		bool requestUserInformation(uint64_t steamID, bool requireNameOnly);
		bool sendClanChatMessage(uint64_t chatID, const String& text);
		void setInGameVoiceSpeaking(uint64_t steamID, bool speaking);
		bool setListenForFriendsMessages(bool intercept);
		void setPersonaName(const String& name);
		void setPlayedWith(uint64_t steamID);
		bool setRichPresence(const String& key, const String& value);

		// Game Search //////////////////////////
		int addGameSearchParams(const String& key, const String& values);
		int searchForGameWithLobby(uint64_t lobbyID, int playerMin, int playerMax);
		int searchForGameSolo(int playerMin, int playerMax);
		int acceptGame();
		int declineGame();
		String retrieveConnectionDetails(uint64_t hostID);
		int endGameSearch();
		int setGameHostParams(const String& key, const String& value);
		int setConnectionDetails(const String& details, int connectionDetails);
		int requestPlayersForGame(int playerMin, int playerMax, int maxTeamSize);
		int hostConfirmGameStart(uint64_t gameID);
		int cancelRequestPlayersForGame();
		int submitPlayerResult(uint64_t gameID, uint64_t playerID, int playerResult);
		int endGame(uint64_t gameID);

		// HTML Surface /////////////////////////
		void addHeader(const String& key, const String& value);
		void allowStartRequest(bool allowed);
		void copyToClipboard();
		void createBrowser(const String& userAgent, const String& userCSS);
		void executeJavascript(const String& script);
		void find(const String& search, bool currentlyInFind, bool reverse);
		void getLinkAtPosition(int x, int y);
		void goBack();
		void goForward();
		void htmlInit();
		void jsDialogResponse(bool result);
		void keyChar(uint32 unicodeChar, int keyModifiers);
		void keyDown(uint32 nativeKeyCode, int keyModifiers);
		void keyUp(uint32 nativeKeyCode, int keyModifiers);
		void loadURL(const String& url, const String& postData);
		void mouseDoubleClick(int mouseButton);
		void mouseDown(int mouseButton);
		void mouseMove(int x, int y);
		void mouseUp(int mouseButton);
		void mouseWheel(int32 delta);
		void pasteFromClipboard();
		void reload();
		void removeBrowser();
		void setBackgroundMode(bool backgroundMode);
		void setCookie(const String& hostname, const String& key, const String& value, const String& path, uint32 expires, bool secure, bool httpOnly);
		void setHorizontalScroll(uint32 absolutePixelScroll);
		void setKeyFocus(bool hasKeyFocus);
		void setPageScaleFactor(float zoom, int pointX, int pointY);
		void setSize(uint32 width, uint32 height);
		void setVerticalScroll(uint32 absolutePixelScroll);
		bool htmlShutdown();
		void stopFind();
		void stopLoad();
		void viewSource();

		// HTTP /////////////////////////////////
		void createCookieContainer( bool allowResponsesToModify);
		uint32_t createHTTPRequest(int requestMethod, const String& absoluteURL);
		bool deferHTTPRequest(uint32 request);
		float getHTTPDownloadProgressPct(uint32 request);
		bool getHTTPRequestWasTimedOut(uint32 request);
		PoolByteArray getHTTPResponseBodyData(uint32 request, uint32 bufferSize);
		uint32 getHTTPResponseBodySize(uint32 request);
		uint32 getHTTPResponseHeaderSize(uint32 request, const String& headerName);
		uint8 getHTTPResponseHeaderValue(uint32 request, const String& headerName, uint32 bufferSize);
		uint8 getHTTPStreamingResponseBodyData(uint32 request, uint32 offset, uint32 bufferSize);
		bool prioritizeHTTPRequest(uint32 request);
		bool releaseCookieContainer();
		bool releaseHTTPRequest(uint32 request);
		bool sendHTTPRequest(uint32 request);
		bool sendHTTPRequestAndStreamResponse(uint32 request);
		bool setHTTPCookie(const String& host, const String& url, const String& cookie);
		bool setHTTPRequestAbsoluteTimeoutMS(uint32 request, uint32 milliseconds);
		bool setHTTPRequestContextValue(uint32 request, uint64_t contextValue);
		bool setHTTPRequestCookieContainer(uint32 request);
		bool setHTTPRequestGetOrPostParameter(uint32 request, const String& name, const String& value);
		bool setHTTPRequestHeaderValue(uint32 request, const String& headerName, const String& headerValue);
		bool setHTTPRequestNetworkActivityTimeout(uint32 request, uint32 timeoutSeconds);
		uint8 setHTTPRequestRawPostBody(uint32 request, const String& contentType, uint32 bodyLen);
		bool setHTTPRequestRequiresVerifiedCertificate(uint32 request, bool requireVerifiedCertificate);
		bool setHTTPRequestUserAgentInfo(uint32 request, const String& userAgentInfo);
		
		// Input ////////////////////////////////
		void activateActionSet(uint64_t inputHandle, uint64_t actionSetHandle);
		void activateActionSetLayer(uint64_t inputHandle, uint64_t actionSetLayerHandle);
		void deactivateActionSetLayer(uint64_t inputHandle, uint64_t actionSetHandle);
		void deactivateAllActionSetLayers(uint64_t inputHandle);
		uint64_t getActionSetHandle(const String& actionSetName);
		int getActionOriginFromXboxOrigin(uint64_t inputHandle, int origin);
		Array getActiveActionSetLayers(uint64_t inputHandle);
		Dictionary getAnalogActionData(uint64_t inputHandle, uint64_t analogActionHandle);
		uint64_t getAnalogActionHandle(const String& actionName);
		Array getAnalogActionOrigins(uint64_t inputHandle, uint64_t actionSetHandle, uint64_t analogActionHandle);
		Array getConnectedControllers();
		uint64_t getControllerForGamepadIndex(int index);
		uint64_t getCurrentActionSet(uint64_t inputHandle);
		Array getDeviceBindingRevision(uint64_t inputHandle);
		Dictionary getDigitalActionData(uint64_t inputHandle, uint64_t digitalActionHandle);
		uint64_t getDigitalActionHandle(const String& actionName);
		Array getDigitalActionOrigins(uint64_t inputHandle, uint64_t actionSetHandle, uint64_t digitalActionHandle);
		int getGamepadIndexForController(uint64_t inputHandle);
		String getGlyphForActionOrigin(int origin);
		String getInputTypeForHandle(uint64_t inputHandle);
		Dictionary getMotionData(uint64_t inputHandle);
		int getRemotePlaySessionID(uint64_t inputHandle);
		String getStringForActionOrigin(int origin);
		bool inputInit();
		bool inputShutdown();
		void runFrame();
		void setLEDColor(uint64_t inputHandle, int colorR, int colorG, int colorB, int flags);
		bool showBindingPanel(uint64_t inputHandle);
		void stopAnalogActionMomentum(uint64_t inputHandle, uint64_t action);
		int translateActionOrigin(int destinationInput, int sourceOrigin);
		void triggerHapticPulse(uint64_t inputHandle, int targetPad, int duration);
		void triggerRepeatedHapticPulse(uint64_t inputHandle, int targetPad, int duration, int offset, int repeat, int flags);
		void triggerVibration(uint64_t inputHandle, uint16_t leftSpeed, uint16_t rightSpeed);

		// Inventory ////////////////////////////
		bool addPromoItem(uint32 item);
		bool addPromoItems(const PoolIntArray items);
		bool checkResultSteamID(uint64_t steamIDExpected);
		bool consumeItem(uint64_t itemConsume, uint32 quantity);
		bool deserializeResult();
		void destroyResult();
		bool exchangeItems(const PoolIntArray outputItems, const uint32 outputQuantity, const uint64_t inputItems, const uint32 inputQuantity);
		bool generateItems(const PoolIntArray items, const uint32 quantity);
		bool getAllItems();
		String getItemDefinitionProperty(uint32 definition, const String& name);
		bool getItemsByID(const uint64_t idArray, uint32 count);
		uint64_t getItemPrice(uint32 definition);
		Array getItemsWithPrices(uint32 length);
		uint32 getNumItemsWithPrices();
		String getResultItemProperty(uint32 index, const String& name);
		Array getResultItems();
		String getResultStatus();
		uint32 getResultTimestamp();
		bool grantPromoItems();
		bool loadItemDefinitions();
		void requestEligiblePromoItemDefinitionsIDs(uint64_t steamID);
		void requestPrices();
		bool serializeResult();
		void startPurchase(const PoolIntArray items, const uint32 quantity);
		bool transferItemQuantity(uint64_t itemID, uint32 quantity, uint64_t itemDestination, bool split);
		bool triggerItemDrop(uint32 definition);
		void startUpdateProperties();
		bool submitUpdateProperties();
		bool removeProperty(uint64_t itemID, const String& name);
		bool setPropertyString(uint64_t itemID, const String& name, const String& value);
		bool setPropertyBool(uint64_t itemID, const String& name, bool value);
		bool setPropertyInt(uint64_t itemID, const String& name, uint64_t value);
		bool setPropertyFloat(uint64_t itemID, const String& name, float value);

		// Matchmaking //////////////////////////
		Array getFavoriteGames();
		int addFavoriteGame(uint32 ip, uint16 port, uint16 queryPort, uint32 flags, uint32 lastPlayed);
		bool removeFavoriteGame(AppId_t appID, uint32 ip, uint16 port, uint16 queryPort, uint32 flags);
		void requestLobbyList();
		void addRequestLobbyListStringFilter(const String& keyToMatch, const String& valueToMatch, int comparisonType);
		void addRequestLobbyListNumericalFilter(const String& keyToMatch, int valueToMatch, int comparisonType);
		void addRequestLobbyListNearValueFilter(const String& keyToMatch, int valueToBeCloseTo);
		void addRequestLobbyListFilterSlotsAvailable(int slotsAvailable);
		void addRequestLobbyListDistanceFilter(int distanceFilter);
		void addRequestLobbyListResultCountFilter(int maxResults);
		void createLobby(int lobbyType, int maxMembers);
		void joinLobby(uint64_t steamIDLobby);
		void leaveLobby(uint64_t steamIDLobby);
		bool inviteUserToLobby(uint64_t steamIDLobby, uint64_t steamIDInvitee);
		int getNumLobbyMembers(uint64_t steamIDLobby);
		uint64_t getLobbyMemberByIndex(uint64_t steamIDLobby, int member);
		String getLobbyData(uint64_t steamIDLobby, const String& key);
		bool setLobbyData(uint64_t steamIDLobby, const String& key, const String& value);
		Dictionary getAllLobbyData(uint64_t steamIDLobby);
		bool deleteLobbyData(uint64_t steamIDLobby, const String& key);
		String getLobbyMemberData(uint64_t steamIDLobby, uint64_t steamIDUser, const String& key);
		void setLobbyMemberData(uint64_t steamIDLobby, const String& key, const String& value);
		bool sendLobbyChatMsg(uint64_t steamIDLobby, const String& messageBody);
		bool requestLobbyData(uint64_t steamIDLobby);
		void setLobbyGameServer(uint64_t steamIDLobby, const String& serverIP, uint16 serverPort, uint64_t steamIDGameServer);
		Dictionary getLobbyGameServer(uint64_t steamIDLobby);
		bool setLobbyMemberLimit(uint64_t steamIDLobby, int maxMembers);
		int getLobbyMemberLimit(uint64_t steamIDLobby);
		bool setLobbyType(uint64_t steamIDLobby, int lobbyType);
		bool setLobbyJoinable(uint64_t steamIDLobby, bool joinable);
		uint64_t getLobbyOwner(uint64_t steamIDLobby);
		bool setLobbyOwner(uint64_t steamIDLobby, uint64_t steamIDNewOwner);
		bool setLinkedLobby(uint64_t steamIDLobby, uint64_t steamIDLobbyDependent);

		// Matchmaking Servers //////////////////
		void cancelQuery(uint64_t serverRequest);
		void cancelServerQuery(int serverQuery);
		int getServerCount(uint64_t serverRequest);
		Dictionary getServerDetails(uint64_t serverRequest, int server);
		bool isRefreshing(uint64_t serverRequest);
///		int pingServer(const String& ip, uint16 port);
//		int playerDetails(uint32 ip, uint16 port);
		void refreshQuery(uint64_t serverRequest);
		void refreshServer(uint64_t serverRequest, int server);
		void releaseRequest(uint64_t serverRequest);
//		uint64_t requestFavoritesServerList(int appID, Array filters);
///		uint64_t requestFriendsServerList(int appID, Array filters);
///		uint64_t requestHistoryServerList(int appID, Array filters);
///		uint64_t requestInternetServerList(int appID, Array filters);
///		uint64_t requestLANServerList(int appID, Array filters);
///		uint64_t requestSpectatorServerList(int appID, Array filters);
///		int serverRules(uint32 ip, uint16 port);

		// Music ////////////////////////////////
		bool musicIsEnabled();
		bool musicIsPlaying();
		float musicGetVolume();
		void musicPause();
		void musicPlay();
		void musicPlayNext();
		void musicPlayPrev();
		void musicSetVolume(float value);

		// Music Remote /////////////////////////
		bool activationSuccess(bool value);
		bool isCurrentMusicRemote();
		bool currentEntryDidChange();
		bool currentEntryIsAvailable(bool available);
		bool currentEntryWillChange();
		bool deregisterSteamMusicRemote();
		bool enableLooped(bool value);
		bool enablePlaylists(bool value);
		bool enablePlayNext(bool value);
		bool enablePlayPrevious(bool value);
		bool enableQueue(bool value);
		bool enableShuffled(bool value);
		bool playlistDidChange();
		bool playlistWillChange();
		bool queueDidChange();
		bool queueWillChange();
		bool registerSteamMusicRemote(const String& name);
		bool resetPlaylistEntries();
		bool resetQueueEntries();
		bool setCurrentPlaylistEntry(int id);
		bool setCurrentQueueEntry(int id);
		bool setDisplayName(const String& name);
		bool setPlaylistEntry(int id, int position, const String& entryText);
//		bool setPNGIcon64x64(const PoolByteArray& icon);
		bool setQueueEntry(int id, int position, const String& entryText);
//		bool updateCurrentEntryCoverArt(const PoolByteArray& art);
		bool updateCurrentEntryElapsedSeconds(int value);
		bool updateCurrentEntryText(const String& text);
		bool updateLooped(bool value);
		bool updatePlaybackStatus(int status);
		bool updateShuffled(bool value);
		bool updateVolume(float value);

		// Networking ///////////////////////////
		bool acceptP2PSessionWithUser(uint64_t steamIDRemote);
		bool allowP2PPacketRelay(bool allow);
		bool closeP2PChannelWithUser(uint64_t steamIDRemote, int channel);
		bool closeP2PSessionWithUser(uint64_t steamIDRemote);
		Dictionary getP2PSessionState(uint64_t steamIDRemote);
		uint32_t getAvailableP2PPacketSize(int channel = 0);
		Dictionary readP2PPacket(uint32_t packet, int channel = 0);
		bool sendP2PPacket(uint64_t steamIDRemote, const PoolByteArray data, int eP2PSendType, int channel = 0);

		// Networking Messages //////////////////
		int sendMessageToUser(const String& message, int flags, int channel);
//		int receiveMessagesOnChannel(int channel, int maxMessages);
		bool acceptSessionWithUser();
		bool closeSessionWithUser();
		bool closeChannelWithUser(int channel);
		int getSessionConnectionInfo();

		// Networking Sockets ///////////////////		
		uint32 createListenSocketIP(const int options);
///		uint32 connectByIPAddress(uint32 ip, uint16 port, Array options);
		uint32 createListenSocketP2P(int port, int optionSize);
		uint32 connectP2P(int port, int numOptions);
		int acceptConnection(uint32 connection);
		bool closeConnection(uint32 peer, int reason, bool linger);
		bool closeListenSocket(uint32 socket);
///		Dictionary createSocketPair(bool loopback, const String& identity1, const String& identity2);
		int sendMessageToConnection(uint32 connection, const String& message, int flags);
///		void sendMessages(int messages, const String& message, uint32 connection, int flags);
		int flushMessagesOnConnection(uint32 connection);
		int receiveMessagesOnConnection(uint32 connection, int maxMessages);
		uint32 createPollGroup();
		bool destroyPollGroup(uint32 pollGroup);
		bool setConnectionPollGroup(uint32 connection, uint32 pollGroup);
		int receiveMessagesOnPollGroup(uint32 pollGroup, int maxMessages);
		bool getConnectionInfo(uint32 connection);
		bool getQuickConnectionStatus(uint32 connection);
		Dictionary getDetailedConnectionStatus(uint32 connection);
		uint64_t getConnectionUserData(uint32 peer);
		void setConnectionName(uint32 peer, const String& name);
		String getConnectionName(uint32 peer);
		bool getListenSocketAddress(uint32 socket);
		bool getIdentity();
		int initAuthentication();
		int getAuthenticationStatus();
///		bool receivedRelayAuthTicket(int ticketSize);
///		int findRelayAuthTicketForServer(const SteamNetworkingIdentity gameServer, int port);
		uint32 connectToHostedDedicatedServer(int port, int options);
		uint16 getHostedDedicatedServerPort();
		uint32 getHostedDedicatedServerPOPId();
//		int getHostedDedicatedServerAddress();
		uint32 createHostedDedicatedServerListenSocket(int port, int options);
///		int getGameCoordinatorServerLogin();

		// Networking Utils /////////////////////
		void initRelayNetworkAccess();
		int getRelayNetworkStatus();
		float getLocalPingLocation();
		int estimatePingTimeBetweenTwoLocations(uint8 location1, uint8 location2);
		int estimatePingTimeFromLocalHost(uint8 location);
		String convertPingLocationToString(uint8 location);
		bool parsePingLocationString(const String& string);
		bool checkPingDataUpToDate(float maxAgeInSeconds);
//		bool isPingMeasurementInProgress();
		int getPingToDataCenter(uint32 popID, uint64_t viaRelayPOP);
		int getDirectPingToPOP(uint32 popID);
		int getPOPCount();
		int getPOPList();
///		bool setConfigValue(int setting, int scopeType, intptr_t object, int dataType, const void* value);
///		Dictionary getConfigValue(int value, int scopeType, intptr_t object);
		Dictionary getConfigValueInfo(int value);
		int getFirstConfigValue();
		bool setGlobalConfigValueInt32(int config, int32 value);
		bool setGlobalConfigValueFloat(int config, float value);
		bool setGlobalConfigValueString(int config, const String& value);
		bool setConnectionConfigValueInt32(uint32 connection, int config, int32 value);
		bool setConnectionConfigValueFloat(uint32 connection, int config, float value);
		bool setConnectionConfigValueString(uint32 connection, int config, const String& value);
		void allocateMessage(int buffer);
		uint32 getLocalTimestamp();
///		void setDebugOutputFunction(int detailLevel, String& function);

		// Parties //////////////////////////////
		Array getAvailableBeaconLocations(uint32 max);
		void createBeacon(uint32 openSlots, uint64_t location, int type, const String& connectString, const String& metadata);
		void onReservationCompleted(uint64_t beacon, uint64_t steamID);
		void cancelReservation(uint64_t beacon, uint64_t steamID);
		void changeNumOpenSlots(uint64_t beacon, uint32 openSlots);
		bool destroyBeacon(uint64_t beacon);
		uint32 getNumActiveBeacons();
		uint64_t getBeaconByIndex(uint32 index);
		Dictionary getBeaconDetails(uint64_t beacon);
		void joinParty(uint64_t beacon);
		String getBeaconLocationData(uint64_t locationID, int locationType, int locationData);

		// Remote Play //////////////////////////
		uint32 getSessionCount();
		uint32 getSessionID(int index);
		uint64_t getSessionSteamID(uint32 sessionID);
		String getSessionClientName(uint32 sessionID);
		int getSessionClientFormFactor(uint32 sessionID);
		Dictionary getSessionClientResolution(uint32 sessionID);
		bool sendRemotePlayTogetherInvite(uint64_t friendID);

		// Remote Storage ///////////////////////
		bool fileDelete(const String& file);
		bool fileExists(const String& file);
		bool fileForget(const String& file);
		bool filePersisted(const String& file);
		Dictionary fileRead(const String& file, int32_t dataToRead);
		void fileReadAsync(const String& file, uint32 offset, uint32_t dataToRead);
		void fileShare(const String& file);
		bool fileWrite(const String& file, const PoolByteArray& data, int32_t dataSize);
		void fileWriteAsync(const String& file, const PoolByteArray& data, int32_t dataSize);
		bool fileWriteStreamCancel(uint64_t writeHandle);
		bool fileWriteStreamClose(uint64_t writeHandle);
		uint64_t fileWriteStreamOpen(const String& file);
		bool fileWriteStreamWriteChunk(uint64_t writeHandle, PoolByteArray& data, int32_t dataSize);
		int32 getCachedUGCCount();
		uint64_t getCachedUGCHandle(int content);
		int32_t getFileCount();
		Dictionary getFileNameAndSize(int file);
		int32_t getFileSize(const String& file);
		int64_t getFileTimestamp(const String& file);
		Dictionary getQuota();
		Dictionary getSyncPlatforms(const String& file);
		Dictionary getUGCDetails(uint64_t content);
		Dictionary getUGCDownloadProgress(uint64_t content);
		bool isCloudEnabledForAccount();
		bool isCloudEnabledForApp();
		void setCloudEnabledForApp(bool enabled);
		bool setSyncPlatforms(const String& file, int platform);
		void ugcDownload(uint64_t content, uint32 priority);
		void ugcDownloadToLocation(uint64_t content, const String& location, uint32 priority);
		int32 ugcRead(uint64_t content, PoolByteArray& data, int32_t dataSize, uint32 offset, int action);

		// Screenshots //////////////////////////
		uint32_t addScreenshotToLibrary(const String& filename, const String& thumbnailFilename, int width, int height);
		uint32_t addVRScreenshotToLibrary(int type, const String& filename, const String& vrFilename);
		void hookScreenshots(bool hook);
		bool isScreenshotsHooked();
		bool setLocation(uint32_t screenshot, const String& location);
		bool tagPublishedFile(uint32 screenshot, uint64_t fileID);
		bool tagUser(uint32 screenshot, uint64_t steamID);
		void triggerScreenshot();
		uint32_t writeScreenshot(const PoolByteArray& RGB, int width, int height);

		// UGC //////////////////////////////////
		void addAppDependency(uint64_t publishedFileID, uint32_t appID);
		void addDependency(uint64_t publishedFileID, uint64_t childPublishedFileID);
		bool addExcludedTag(uint64_t queryHandle, const String& tagName);
		bool addItemKeyValueTag(uint64_t queryHandle, const String& key, const String& value);
		bool addItemPreviewFile(uint64_t queryHandle, const String& previewFile, int type);
		bool addItemPreviewVideo(uint64_t queryHandle, const String& videoID);
		void addItemToFavorites(uint32_t appID, uint64_t publishedFileID);
		bool addRequiredKeyValueTag(uint64_t queryHandle, const String& key, const String& value);
		bool addRequiredTag(uint64_t queryHandle, const String& tagName);
		bool addRequiredTagGroup(uint64_t queryHandle, Array tagArray);
		bool initWorkshopForGameServer(uint32_t workshopDepotID);
		void createItem(AppId_t appID, int fileType);
		uint64_t createQueryAllUGCRequest(int queryType, int matchingType, uint32_t creatorID, uint32_t consumerID, uint32 page);
		uint64_t createQueryUGCDetailsRequest(Array publishedFileID);
		uint64_t createQueryUserUGCRequest(int accountID, int listType, int matchingUGCType, int sortOrder, int creatorID, int consumerID, uint32 page);
		void deleteItem(uint64_t publishedFileID);
		bool downloadItem(uint64_t publishedFileID, bool highPriority);
		Dictionary getItemDownloadInfo(uint64_t publishedFileID);
		Dictionary getItemInstallInfo(uint64_t publishedFileID);
		int getItemState(uint64_t publishedFileID);
		Dictionary getItemUpdateProgress(uint64_t updateHandle);
		uint32 getNumSubscribedItems();
		Dictionary getQueryUGCAdditionalPreview(uint64_t queryHandle, uint32 index, uint32 previewIndex);
		Dictionary getQueryUGCChildren(uint64_t queryHandle, uint32 index);
		Dictionary getQueryUGCKeyValueTag(uint64_t queryHandle, uint32 index, uint32 keyValueTagIndex);
		String getQueryUGCMetadata(uint64_t queryHandle, uint32 index);
		uint32 getQueryUGCNumAdditionalPreviews(uint64_t queryHandle, uint32 index);
		uint32 getQueryUGCNumKeyValueTags(uint64_t queryHandle, uint32 index);
		uint32 getQueryUGCNumTags(uint64_t queryHandle, uint32 index);
		String getQueryUGCPreviewURL(uint64_t queryHandle, uint32 index);
		Dictionary getQueryUGCResult(uint64_t queryHandle, uint32 index);
		Dictionary getQueryUGCStatistic(uint64_t queryHandle, uint32 index, int statType);
		String getQueryUGCTag(uint64_t queryHandle, uint32 index, uint32 tagIndex);
		String getQueryUGCTagDisplayName(uint64_t queryHandle, uint32 index, uint32 tagIndex);
		Array getSubscribedItems();
		void getUserItemVote(uint64_t publishedFileID);
		bool releaseQueryUGCRequest(uint64_t queryHandle);
		void removeAppDependency(uint64_t publishedFileID, uint32_t appID);
		void removeDependency(uint64_t publishedFileID, uint64_t childPublishedFileID);
		void removeItemFromFavorites(uint32_t appID, uint64_t publishedFileID);
		bool removeItemKeyValueTags(uint64_t updateHandle, const String& key);
		bool removeItemPreview(uint64_t updateHandle, uint32 index);
		void sendQueryUGCRequest(uint64_t updateHandle);
		bool setAllowCachedResponse(uint64_t updateHandle, uint32 maxAgeSeconds);
		bool setCloudFileNameFilter(uint64_t updateHandle, const String& matchCloudFilename);
		bool setItemContent(uint64_t updateHandle, const String& contentFolder);
		bool setItemDescription(uint64_t updateHandle, const String& description);
		bool setItemMetadata(uint64_t updateHandle, const String& metadata);
		bool setItemPreview(uint64_t updateHandle, const String& previewFile);
		bool setItemTags(uint64_t updateHandle, Array tagArray);
		bool setItemTitle(uint64_t updateHandle, const String& title);
		bool setItemUpdateLanguage(uint64_t updateHandle, const String& language);
		bool setItemVisibility(uint64_t updateHandle, int visibility);
		bool setLanguage(uint64_t queryHandle, const String& language);
		bool setMatchAnyTag(uint64_t queryHandle, bool matchAnyTag);
		bool setRankedByTrendDays(uint64_t queryHandle, uint32 days);
		bool setReturnAdditionalPreviews(uint64_t queryHandle, bool returnAdditionalPreviews);
		bool setReturnChildren(uint64_t queryHandle, bool returnChildren);
		bool setReturnKeyValueTags(uint64_t queryHandle, bool returnKeyValueTags);
		bool setReturnLongDescription(uint64_t queryHandle, bool returnLongDescription);
		bool setReturnMetadata(uint64_t queryHandle, bool returnMetadata);
		bool setReturnOnlyIDs(uint64_t queryHandle, bool returnOnlyIDs);
		bool setReturnPlaytimeStats(uint64_t queryHandle, uint32 days);
		bool setReturnTotalOnly(uint64_t queryHandle, bool returnTotalOnly);
		bool setSearchText(uint64_t queryHandle, const String& searchText);
		void setUserItemVote(uint64_t publishedFileID, bool voteUp);
		uint64_t startItemUpdate(uint32_t appID, uint64_t fileId);
		void startPlaytimeTracking(Array publishedFileIDs);
		void stopPlaytimeTracking(Array publishedFileIDs);
		void stopPlaytimeTrackingForAllItems();
		void getAppDependencies(uint64_t publishedFileID);
		void submitItemUpdate(uint64_t updateHandle, const String& changeNote);
		void subscribeItem(uint64_t publishedFileID);
		void suspendDownloads(bool suspend);
		void unsubscribeItem(uint64_t publishedFileID);
		bool updateItemPreviewFile(uint64_t updateHandle, uint32 index, const String& previewFile);
		bool updateItemPreviewVideo(uint64_t updateHandle, uint32 index, const String& videoID);

		// Users ////////////////////////////////
		void advertiseGame(const String& serverIP, int port);
		int beginAuthSession(PoolByteArray ticket, int ticketSize, uint64_t steamID);
		void cancelAuthTicket(uint32_t authTicket);
		Dictionary decompressVoice(const PoolByteArray& voice, uint32 voiceSize, uint32 sampleRate);
		void endAuthSession(uint64_t steamID);
		Dictionary getAuthSessionTicket();
		int getAvailableVoice();
		void getDurationControl();
		Dictionary getEncryptedAppTicket();
		int getGameBadgeLevel(int series, bool foil);
		int getPlayerSteamLevel();
		uint64_t getSteamID();		
		String getUserDataFolder();		
		uint32 getVoice();
		uint32 getVoiceOptimalSampleRate();
		Dictionary initiateGameConnection(uint64_t serverID, uint32 serverIP, uint16 serverPort, bool secure);
		bool isBehindNAT();
		bool isPhoneIdentifying();
		bool isPhoneRequiringVerification();
		bool isPhoneVerified();
		bool isTwoFactorEnabled();
		bool loggedOn();
		void requestEncryptedAppTicket(const String& secret);
		void requestStoreAuthURL(const String& redirect);
		void startVoiceRecording();
		void stopVoiceRecording();
		void terminateGameConnection(uint32 serverIP, uint16 serverPort);
		int userHasLicenseForApp(uint64_t steamID, uint32_t appID);

		// User Stats ///////////////////////////
		void attachLeaderboardUGC(uint64_t ugcHandle, uint64_t thisLeaderboard=0);
		bool clearAchievement(const String& name);
		void downloadLeaderboardEntries(int start, int end, int type=k_ELeaderboardDataRequestGlobal, uint64_t thisLeaderboard=0);
		void downloadLeaderboardEntriesForUsers(Array usersID, uint64_t thisLeaderboard=0);
		void findLeaderboard(const String& name);
		void findOrCreateLeaderboard(const String& name, int sortMethod, int displayType);
		Dictionary getAchievement(const String& name);
		Dictionary getAchievementAchievedPercent(const String& name);
		Dictionary getAchievementAndUnlockTime(const String& name);
		String getAchievementDisplayAttribute(const String& name, const String& key);
		int getAchievementIcon(const String& name);
		String getAchievementName(uint32_t achievement);
		Dictionary getAchievementProgressLimitsInt(const String& name);
		Dictionary getAchievementProgressLimitsFloat(const String& name);
		uint64_t getGlobalStatInt(const String& name);
		double getGlobalStatFloat(const String& name);
		uint64_t getGlobalStatIntHistory(const String& name);
		double getGlobalStatFloatHistory(const String& name);
		Dictionary getLeaderboardDisplayType(uint64_t thisLeaderboard=0);
		int getLeaderboardEntryCount(uint64_t thisLeaderboard=0);
		String getLeaderboardName(uint64_t thisLeaderboard=0);
		Dictionary getLeaderboardSortMethod(uint64_t thisLeaderboard=0);
		Dictionary getMostAchievedAchievementInfo();
		Dictionary getNextMostAchievedAchievementInfo(int iterator);
		uint32_t getNumAchievements();
		void getNumberOfCurrentPlayers();
		float getStatFloat(const String& name);
		int getStatInt(const String& name);
		Dictionary getUserAchievement(uint64_t steamID, const String& name);
		Dictionary getUserAchievementAndUnlockTime(uint64_t steamID, const String& name);
		float getUserStatFloat(uint64_t steamID, const String& name);
		int getUserStatInt(uint64_t steamID, const String& name);
		bool indicateAchievementProgress(const String& name, int currentProgress, int maxProgress);
		bool requestCurrentStats();
		void requestGlobalAchievementPercentages();
		void requestGlobalStats(int historyDays);
		void requestUserStats(uint64_t steamID);
		bool resetAllStats(bool achievementsToo=true);
		bool setAchievement(const String& name);
		int setLeaderboardDetailsMax(int max);
		bool setStatFloat(const String& name, float value);
		bool setStatInt(const String& name, int value);
		bool storeStats();
		bool updateAvgRateStat(const String& name, float thisSession, double sessionLength);
		void uploadLeaderboardScore(int score, bool keepBest=false, PoolIntArray details=PoolIntArray(), uint64_t thisLeaderboard=0);
		Array getLeaderboardEntries();

		// Utils ////////////////////////////////
		String filterText(int context, uint64_t steamID, const String& message);
		String getAPICallFailureReason();
		int getAppID();
		int getCurrentBatteryPower();
		Dictionary getImageRGBA(int iImage);
		Dictionary getImageSize(int iImage);
		uint32 getIPCCallCount();
		String getIPCountry();
		int getSecondsSinceAppActive();
		int getSecondsSinceComputerActive();
		int getServerRealTime();
		String getSteamUILanguage();
		bool initFilterText();
		Dictionary isAPICallCompleted();
		bool isOverlayEnabled();
		bool isSteamChinaLauncher();
		bool isSteamInBigPictureMode();
		bool isSteamRunningInVR();
		bool isVRHeadsetStreamingEnabled();
		bool overlayNeedsPresent();
		void setOverlayNotificationInset(int horizontal, int vertical);
		void setOverlayNotificationPosition(int pos);
		void setVRHeadsetStreamingEnabled(bool enabled);
		bool showGamepadTextInput(int inputMode, int lineInputMode, const String& description, uint32 maxText, const String& presetText);
		void startVRDashboard();

		// Video ////////////////////////////////
		void getOPFSettings(uint32_t appID);
		String getOPFStringForApp(uint32_t appID);
		void getVideoURL(uint32_t appID);
		Dictionary isBroadcasting();

	protected:
		static void _bind_methods();
		static Steam* singleton;

	private:
		// Main
		bool isInitSuccess;

		// Apps
		uint64 currentAppID;
		
		// Friends
		CSteamID clanActivity;

		// HTML Surface
		uint32 browserHandle;

		// HTTP
		uint32 cookieHandle;
		uint32 requestHandle;

		// Inventory
		SteamInventoryUpdateHandle_t inventoryUpdateHandle;
		SteamInventoryResult_t inventoryHandle;
		SteamItemDetails_t inventoryDetails;

		// Leaderboards
		SteamLeaderboard_t leaderboardHandle;
		Array leaderboardEntriesArray;
		int leaderboardDetailsMax = 0;

		// Matchmaking Server
		int serverQuery;
		uint64_t serverRequest;

		// Networking Messages
		SteamNetworkingMessage_t *networkMessages;

		// Networking Sockets
		uint32 networkConnection;
		uint32 listenSocket;
		uint32 networkPollGroup;
		uint64_t networkingMicroseconds;

		// Parties
		uint64 partyBeaconID;

		// Remote Play
		uint32 sessionID;

		// Remote Storage
		uint64_t writeStreamHandle;

		// User stats
		int numAchievements;
		bool statsInitialized;
		uint64 ugcHandle;

		// Utils
		uint64_t apiHandle = 0;


		/////////////////////////////////////////
		// STRUCTS //////////////////////////////
		/////////////////////////////////////////
		//
		// Friend session state info ////////////
		struct FriendSessionStateInfo {
			uint32 onlineSessionInstance;
			uint8 publishedToFriendsSessionInstance;
		};
		Vector<FriendSessionStateInfo> sessionInfo;

		// Achievement data /////////////////////
		struct AchievementData {
			int achievementID;
			const char achievement;
			char name[128];
			char description[256];
			bool achieved;
			int icon;
		};
		Vector<AchievementData> achievementData;

		// Leaderboard entry ////////////////////
		struct LeaderboardEntry {
			uint64_t steamID;
			int32 globalRank;
			int32 score;
			int32 details;
			uint64 ugcHandle; 
		};
		Vector<LeaderboardEntry> leaderboardEntry;

		// UGC item details /////////////////////
		struct UGCDetails {
			uint64_t publishedFileID;
			int result;
			int fileType;
			int creatorAppID;
			int consumerAppID;
			char title[128];
			char description[256];
			uint64_t steamIDOwner;
			uint32 timeCreated;
			uint32 timeUpdated;
			uint32 timeAddedToList;
			int visibility;
			bool banned;
			bool acceptedForUse;
			bool tagsTruncated;
			char tags[256];
			int file;
			int previewFile;
			char filename[128];
			int32 fileSize;
			int32 previewFileSize;
			char url[256];
			uint32 votesUp;
			uint32 votesDown;
			float score;
			uint32 numChildren;
		};
		Vector<UGCDetails> ugcDetails;

		// Item Details /////////////////////////
		struct SteamItemDetails {
			SteamItemInstanceID_t itemID;
			SteamItemDef_t definition;
			uint16 quantity;
			uint16 flags;
		};
		Vector<SteamItemDetails> itemDetails;

		// Party Beacon Location
		struct SteamPartyBeaconLocation {
			ESteamPartyBeaconLocationType type;
			uint64 locationID;
		};
		Vector<SteamPartyBeaconLocation> beaconLocation;

		// Run the Steamworks API callbacks /////
		void run_callbacks(){
			SteamAPI_RunCallbacks();
		}


		/////////////////////////////////////////
		// STEAM CALLBACKS //////////////////////
		/////////////////////////////////////////
		//
		// Apps callbacks ///////////////////////
		STEAM_CALLBACK(Steam, _dlc_installed, DlcInstalled_t, callbackDLCInstalled);
		STEAM_CALLBACK(Steam, _file_details_result, FileDetailsResult_t, callbackFileDetailsResult);
		STEAM_CALLBACK(Steam, _new_launch_url_parameters, NewUrlLaunchParameters_t, callbackNewLaunchURLParameters);
//		STEAM_CALLBACK(Steam, _new_launch_query_parameters, NewLaunchQueryParameters_t, callbackNewLaunchQueryParameters);  Seems not to be found?

		// Friends callbacks ////////////////////
		STEAM_CALLBACK(Steam, _avatar_loaded, AvatarImageLoaded_t, callbackAvatarLoaded);
		STEAM_CALLBACK(Steam, _clan_activity_downloaded, DownloadClanActivityCountsResult_t, callbackClanActivityDownloaded);
		STEAM_CALLBACK(Steam, _friend_rich_presence_update, FriendRichPresenceUpdate_t, callbackFriendRichPresenceUpdate);
		STEAM_CALLBACK(Steam, _connected_chat_join, GameConnectedChatJoin_t, callbackConnectedChatJoin);
		STEAM_CALLBACK(Steam, _connected_chat_leave, GameConnectedChatLeave_t, callbackConnectedChatLeave);
		STEAM_CALLBACK(Steam, _connected_clan_chat_message, GameConnectedClanChatMsg_t, callbackConnectedClanChatMessage);
		STEAM_CALLBACK(Steam, _connected_friend_chat_message, GameConnectedFriendChatMsg_t, callbackConnectedFriendChatMessage);
		STEAM_CALLBACK(Steam, _join_requested, GameLobbyJoinRequested_t, callbackJoinRequested);
		STEAM_CALLBACK(Steam, _overlay_toggled, GameOverlayActivated_t, callbackOverlayToggled);
		STEAM_CALLBACK(Steam, _join_game_requested, GameRichPresenceJoinRequested_t, callbackJoinGameRequested);
		STEAM_CALLBACK(Steam, _change_server_requested, GameServerChangeRequested_t, callbackChangeServerRequested);
		STEAM_CALLBACK(Steam, _join_clan_chat_complete, JoinClanChatRoomCompletionResult_t, callbackJoinClanChatComplete);
		STEAM_CALLBACK(Steam, _persona_state_change, PersonaStateChange_t, callbackPersonaStateChange);
		STEAM_CALLBACK(Steam, _name_changed, SetPersonaNameResponse_t, callbackNameChanged);
		STEAM_CALLBACK(Steam, _overlay_browser_protocol, OverlayBrowserProtocolNavigation_t, callbackOverlayBrowserProtocol);

		// Game Search callbacks ////////////////
		STEAM_CALLBACK(Steam, _search_for_game_progress, SearchForGameProgressCallback_t, callbackSearchForGameProgress);
		STEAM_CALLBACK(Steam, _search_for_game_result, SearchForGameResultCallback_t, callbackSearchForGameResult);
		STEAM_CALLBACK(Steam, _request_players_for_game_progress, RequestPlayersForGameProgressCallback_t, callbackRequestPlayersForGameProgress);
		STEAM_CALLBACK(Steam, _request_players_for_game_result, RequestPlayersForGameResultCallback_t, callbackRequestPlayersForGameResult);
		STEAM_CALLBACK(Steam, _request_players_for_game_final_result, RequestPlayersForGameFinalResultCallback_t, callbackRequestPlayersForGameFinalResult);
		STEAM_CALLBACK(Steam, _submit_player_result, SubmitPlayerResultResultCallback_t, callbackSubmitPlayerResult);
		STEAM_CALLBACK(Steam, _end_game_result, EndGameResultCallback_t, callbackEndGameResult);

		// HTML Surface callbacks ///////////////
		STEAM_CALLBACK(Steam, _html_browser_ready, HTML_BrowserReady_t, callbackHTMLBrowserReady);
		STEAM_CALLBACK(Steam, _html_can_go_backandforward, HTML_CanGoBackAndForward_t, callbackHTMLCanGoBackandforward);
		STEAM_CALLBACK(Steam, _html_changed_title, HTML_ChangedTitle_t, callbackHTMLChangedTitle);
		STEAM_CALLBACK(Steam, _html_close_browser, HTML_CloseBrowser_t, callbackHTMLCloseBrowser);
		STEAM_CALLBACK(Steam, _html_file_open_dialog, HTML_FileOpenDialog_t, callbackHTMLFileOpenDialog);
		STEAM_CALLBACK(Steam, _html_finished_request, HTML_FinishedRequest_t, callbackHTMLFinishedRequest);
		STEAM_CALLBACK(Steam, _html_hide_tooltip, HTML_HideToolTip_t, callbackHTMLHideTooltip);
		STEAM_CALLBACK(Steam, _html_horizontal_scroll, HTML_HorizontalScroll_t, callbackHTMLHorizontalScroll);
		STEAM_CALLBACK(Steam, _html_js_alert, HTML_JSAlert_t, callbackHTMLJSAlert);
		STEAM_CALLBACK(Steam, _html_js_confirm, HTML_JSConfirm_t, callbackHTMLJSConfirm);
		STEAM_CALLBACK(Steam, _html_link_at_position, HTML_LinkAtPosition_t, callbackHTMLLinkAtPosition);
		STEAM_CALLBACK(Steam, _html_needs_paint, HTML_NeedsPaint_t, callbackHTMLNeedsPaint);
		STEAM_CALLBACK(Steam, _html_new_window, HTML_NewWindow_t, callbackHTMLNewWindow);
		STEAM_CALLBACK(Steam, _html_open_link_in_new_tab, HTML_OpenLinkInNewTab_t, callbackHTMLOpenLinkInNewTab);
		STEAM_CALLBACK(Steam, _html_search_results, HTML_SearchResults_t, callbackHTMLSearchResults);
		STEAM_CALLBACK(Steam, _html_set_cursor, HTML_SetCursor_t, callbackHTMLSetCursor);
		STEAM_CALLBACK(Steam, _html_show_tooltip, HTML_ShowToolTip_t, callbackHTMLShowTooltip);
		STEAM_CALLBACK(Steam, _html_start_request, HTML_StartRequest_t, callbackHTMLStartRequest);
		STEAM_CALLBACK(Steam, _html_status_text, HTML_StatusText_t, callbackHTMLStatusText);
		STEAM_CALLBACK(Steam, _html_update_tooltip, HTML_UpdateToolTip_t, callbackHTMLUpdateTooltip);
		STEAM_CALLBACK(Steam, _html_url_changed, HTML_URLChanged_t, callbackHTMLURLChanged);
		STEAM_CALLBACK(Steam, _html_vertical_scroll, HTML_VerticalScroll_t, callbackHTMLVerticalScroll);

		// HTTP callbacks ///////////////////////
		STEAM_CALLBACK(Steam, _http_request_completed, HTTPRequestCompleted_t, callbackHTTPRequestCompleted);
		STEAM_CALLBACK(Steam, _http_request_data_received, HTTPRequestDataReceived_t, callbackHTTPRequestDataReceived);
		STEAM_CALLBACK(Steam, _http_request_headers_received, HTTPRequestHeadersReceived_t, callbackHTTPRequestHeadersReceived);

		// Inventory callbacks //////////////////
		STEAM_CALLBACK(Steam, _inventory_definition_update, SteamInventoryDefinitionUpdate_t, callbackInventoryDefinitionUpdate);
		STEAM_CALLBACK(Steam, _inventory_full_update, SteamInventoryFullUpdate_t, callbackInventoryFullUpdate);
		STEAM_CALLBACK(Steam, _inventory_result_ready, SteamInventoryResultReady_t, callbackInventoryResultReady);

		// Matchmaking callbacks ////////////////
		STEAM_CALLBACK(Steam, _favorites_list_accounts_updated, FavoritesListAccountsUpdated_t, callbackFavoritesListAccountsUpdated);
		STEAM_CALLBACK(Steam, _favorites_list_changed, FavoritesListChanged_t, callbackFavoritesListChanged);
		STEAM_CALLBACK(Steam, _lobby_message, LobbyChatMsg_t, callbackLobbyMessage);
		STEAM_CALLBACK(Steam, _lobby_chat_update, LobbyChatUpdate_t, callbackLobbyChatUpdate);
		STEAM_CALLBACK(Steam, _lobby_data_update, LobbyDataUpdate_t, callbackLobbyDataUpdate);
		STEAM_CALLBACK(Steam, _lobby_joined, LobbyEnter_t, callbackLobbyJoined);
		STEAM_CALLBACK(Steam, _lobby_game_created, LobbyGameCreated_t, callbackLobbyGameCreated);
		STEAM_CALLBACK(Steam, _lobby_invite, LobbyInvite_t, callbackLobbyInvite);
		STEAM_CALLBACK(Steam, _lobby_kicked, LobbyKicked_t, callbackLobbyKicked);

		// Music Remote callbacks ///////////////
		STEAM_CALLBACK(Steam, _music_player_remote_to_front, MusicPlayerRemoteToFront_t, callbackMusicPlayerRemoteToFront);
		STEAM_CALLBACK(Steam, _music_player_remote_will_activate, MusicPlayerRemoteWillActivate_t, callbackMusicPlayerRemoteWillActivate);
		STEAM_CALLBACK(Steam, _music_player_remote_will_deactivate, MusicPlayerRemoteWillDeactivate_t, callbackMusicPlayerRemoteWillDeactivate);
		STEAM_CALLBACK(Steam, _music_player_selects_playlist_entry, MusicPlayerSelectsPlaylistEntry_t, callbackMusicPlayerSelectsPlaylistEntry);
		STEAM_CALLBACK(Steam, _music_player_selects_queue_entry, MusicPlayerSelectsQueueEntry_t, callbackMusicPlayerSelectsQueueEntry);
		STEAM_CALLBACK(Steam, _music_player_wants_looped, MusicPlayerWantsLooped_t, callbackMusicPlayerWantsLooped);
		STEAM_CALLBACK(Steam, _music_player_wants_pause, MusicPlayerWantsPause_t, callbackMusicPlayerWantsPause);
		STEAM_CALLBACK(Steam, _music_player_wants_playing_repeat_status, MusicPlayerWantsPlayingRepeatStatus_t, callbackMusicPlayerWantsPlayingRepeatStatus);
		STEAM_CALLBACK(Steam, _music_player_wants_play_next, MusicPlayerWantsPlayNext_t, callbackMusicPlayerWantsPlayNext);
		STEAM_CALLBACK(Steam, _music_player_wants_play_previous, MusicPlayerWantsPlayPrevious_t, callbackMusicPlayerWantsPlayPrevious);
		STEAM_CALLBACK(Steam, _music_player_wants_play, MusicPlayerWantsPlay_t, callbackMusicPlayerWantsPlay);
		STEAM_CALLBACK(Steam, _music_player_wants_shuffled, MusicPlayerWantsShuffled_t, callbackMusicPlayerWantsShuffled);
		STEAM_CALLBACK(Steam, _music_player_wants_volume, MusicPlayerWantsVolume_t, callbackMusicPlayerWantsVolume);
		STEAM_CALLBACK(Steam, _music_player_will_quit, MusicPlayerWillQuit_t, callbackMusicPlayerWillQuit);

		// Networking callbacks /////////////////
		STEAM_CALLBACK(Steam, _p2p_session_connect_fail, P2PSessionConnectFail_t, callbackP2PSessionConnectFail);
		STEAM_CALLBACK(Steam, _p2p_session_request, P2PSessionRequest_t, callbackP2PSessionRequest);

		// Networking Messages callbacks ////////
		STEAM_CALLBACK(Steam, _network_messages_session_request, SteamNetworkingMessagesSessionRequest_t, callbackNetworkMessagesSessionRequest);
		STEAM_CALLBACK(Steam, _network_messages_session_failed, SteamNetworkingMessagesSessionFailed_t, callbackNetworkMessagesSessionFailed);

		// Networking Sockets callbacks /////////
		STEAM_CALLBACK(Steam, _network_connection_status_changed, SteamNetConnectionStatusChangedCallback_t, callbackNetworkConnectionStatusChanged);
		STEAM_CALLBACK(Steam, _network_authentication_status, SteamNetAuthenticationStatus_t, callbackNetworkAuthenticationStatus);

		// Networking Utils callbacks ///////////
		STEAM_CALLBACK(Steam, _relay_network_status, SteamRelayNetworkStatus_t, callbackRelayNetworkStatus);

		// Parties //////////////////////////////
		STEAM_CALLBACK(Steam, _reservation_notification, ReservationNotificationCallback_t, callbackReserveNotification);
		STEAM_CALLBACK(Steam, _available_beacon_locations_updated, AvailableBeaconLocationsUpdated_t, callbackAvailableBeaconLocationsUpdated);
		STEAM_CALLBACK(Steam, _active_beacons_updated, ActiveBeaconsUpdated_t, callbackActiveBeaconsUpdated);

		// Remote Play callbacks ////////////////
		STEAM_CALLBACK(Steam, _remote_play_session_connected, SteamRemotePlaySessionConnected_t, callbackRemotePlaySessionConnected);
		STEAM_CALLBACK(Steam, _remote_play_session_disconnected, SteamRemotePlaySessionDisconnected_t, callbackRemotePlaySessionDisconnected);

		// Screenshot callbacks /////////////////
		STEAM_CALLBACK(Steam, _screenshot_ready, ScreenshotReady_t, callbackScreenshotReady);
		STEAM_CALLBACK(Steam, _screenshot_requested, ScreenshotRequested_t, callbackScreenshotRequested);

		// UGC callbacks ////////////////////////
		STEAM_CALLBACK(Steam, _item_downloaded, DownloadItemResult_t, callbackItemDownloaded);
		STEAM_CALLBACK(Steam, _item_installed, ItemInstalled_t, callbackItemInstalled);

		// User callbacks ///////////////////////
		STEAM_CALLBACK(Steam, _client_game_server_deny, ClientGameServerDeny_t, callbackClientGameServerDeny);
		STEAM_CALLBACK(Steam, _game_web_callback, GameWebCallback_t, callbackGameWebCallback);
		STEAM_CALLBACK(Steam, _get_auth_session_ticket_response, GetAuthSessionTicketResponse_t, callbackGetAuthSessionTicketResponse);
		STEAM_CALLBACK(Steam, _ipc_failure, IPCFailure_t, callbackIPCFailure);
		STEAM_CALLBACK(Steam, _licenses_updated, LicensesUpdated_t, callbackLicensesUpdated);
		STEAM_CALLBACK(Steam, _microstransaction_auth_response, MicroTxnAuthorizationResponse_t, callbackMicrotransactionAuthResponse);
		STEAM_CALLBACK(Steam, _steam_server_connected, SteamServersConnected_t, callbackSteamServerConnected);
		STEAM_CALLBACK(Steam, _steam_server_disconnected, SteamServersDisconnected_t, callbackSteamServerDisconnected);
		STEAM_CALLBACK(Steam, _validate_auth_ticket_response, ValidateAuthTicketResponse_t, callbackValidateAuthTicketResponse);

		// User stat callbacks //////////////////
		STEAM_CALLBACK(Steam, _user_achievement_stored, UserAchievementStored_t, callbackUserAchievementStored);
		STEAM_CALLBACK(Steam, _current_stats_received, UserStatsReceived_t, callbackCurrentStatsReceived);
		STEAM_CALLBACK(Steam, _user_stats_stored, UserStatsStored_t, callbackUserStatsStored);
		STEAM_CALLBACK(Steam, _user_stats_unloaded, UserStatsUnloaded_t, callbackUserStatsUnloaded);

		// Utility callbacks ////////////////////
		STEAM_CALLBACK(Steam, _gamepad_text_input_dismissed, GamepadTextInputDismissed_t, callbackGamepadTextInputDismissed);
		STEAM_CALLBACK(Steam, _ip_country, IPCountry_t, callbackIPCountry);
		STEAM_CALLBACK(Steam, _low_power, LowBatteryPower_t, callbackLowPower);
		STEAM_CALLBACK(Steam, _steam_api_call_completed, SteamAPICallCompleted_t, callbackSteamAPICallCompleted);
		STEAM_CALLBACK(Steam, _steam_shutdown, SteamShutdown_t, callbackSteamShutdown);

		// Video callbacks //////////////////////
//		STEAM_CALLBACK(Steam, _broadcast_upload_start, BroadcastUploadStart_t, callbackBroadcastUploadStart);		// In documentation but not in actual SDK?
//		STEAM_CALLBACK(Steam, _broadcast_upload_stop, BroadcastUploadStop_t, callbackBroadcastUploadStop);			// In documentation but not in actual SDK?
		STEAM_CALLBACK(Steam, _get_opf_settings_result, GetOPFSettingsResult_t, callbackGetOPFSettingsResult);
		STEAM_CALLBACK(Steam, _get_video_result, GetVideoURLResult_t, callbackGetVideoResult);


		/////////////////////////////////////////
		// STEAM CALL RESULTS ///////////////////
		/////////////////////////////////////////
		//
		// Friends call results /////////////////
		CCallResult<Steam, ClanOfficerListResponse_t> callResultClanOfficerList;
		void _request_clan_officer_list(ClanOfficerListResponse_t *callData, bool ioFailure);
		CCallResult<Steam, FriendsEnumerateFollowingList_t> callResultEnumerateFollowingList;
		void _enumerate_following_list(FriendsEnumerateFollowingList_t *callData, bool ioFailure);
		CCallResult<Steam, FriendsGetFollowerCount_t> callResultFollowerCount;
		void _get_follower_count(FriendsGetFollowerCount_t *callData, bool ioFailure);
		CCallResult<Steam, FriendsIsFollowing_t> callResultIsFollowing;
		void _is_following(FriendsIsFollowing_t *callData, bool ioFailure);

		// Inventory call results ///////////////
		CCallResult<Steam, SteamInventoryEligiblePromoItemDefIDs_t> callResultEligiblePromoItemDefIDs;
		void _inventory_eligible_promo_item(SteamInventoryEligiblePromoItemDefIDs_t *callData, bool ioFailure);
		CCallResult<Steam, SteamInventoryRequestPricesResult_t> callResultRequestPrices;
		void _inventory_request_prices_result(SteamInventoryRequestPricesResult_t *callData, bool ioFailure);
		CCallResult<Steam, SteamInventoryStartPurchaseResult_t> callResultStartPurchase;
		void _inventory_start_purchase_result(SteamInventoryStartPurchaseResult_t *callData, bool ioFailure);

		// Matchmaking call results /////////////
		CCallResult<Steam, LobbyCreated_t> callResultCreateLobby;
		void _lobby_created(LobbyCreated_t *callData, bool ioFailure);
		CCallResult<Steam, LobbyMatchList_t> callResultLobbyList;
		void _lobby_match_list(LobbyMatchList_t *callData, bool ioFailure);

		// Parties call results /////////////////
		CCallResult<Steam, JoinPartyCallback_t> callResultJoinParty;
		void _join_party(JoinPartyCallback_t *callData, bool ioFailure);
		CCallResult<Steam, CreateBeaconCallback_t> callResultCreateBeacon;
		void _create_beacon(CreateBeaconCallback_t *callData, bool ioFailure);
		CCallResult<Steam, ChangeNumOpenSlotsCallback_t> callResultChangeNumOpenSlots;
		void _change_num_open_slots(ChangeNumOpenSlotsCallback_t *callData, bool ioFailure);

		// Remote Storage call results //////////
		CCallResult<Steam, RemoteStorageFileReadAsyncComplete_t> callResultFileReadAsyncComplete;
		void _file_read_async_complete(RemoteStorageFileReadAsyncComplete_t *callData, bool ioFailure);
		CCallResult<Steam, RemoteStorageFileShareResult_t> callResultFileShareResult;
		void _file_share_result(RemoteStorageFileShareResult_t *callData, bool ioFailure);
		CCallResult<Steam, RemoteStorageFileWriteAsyncComplete_t> callResultFileWriteAsyncComplete;
		void _file_write_async_complete(RemoteStorageFileWriteAsyncComplete_t *callData, bool ioFailure);
		CCallResult<Steam, RemoteStorageDownloadUGCResult_t> callResultDownloadUGCResult;
		void _download_ugc_result(RemoteStorageDownloadUGCResult_t *callData, bool ioFailure);
		CCallResult<Steam, RemoteStorageUnsubscribePublishedFileResult_t> callResultUnsubscribeItem;
		void _unsubscribe_item(RemoteStorageUnsubscribePublishedFileResult_t *callData, bool ioFailure);
		CCallResult<Steam, RemoteStorageSubscribePublishedFileResult_t> callResultSubscribeItem;
		void _subscribe_item(RemoteStorageSubscribePublishedFileResult_t *callData, bool ioFailure);

		// UGC call results /////////////////////
		CCallResult<Steam, AddAppDependencyResult_t> callResultAddAppDependency;
		void _add_app_dependency_result(AddAppDependencyResult_t *callData, bool ioFailure);
		CCallResult<Steam, AddUGCDependencyResult_t> callResultAddUGCDependency;
		void _add_ugc_dependency_result(AddUGCDependencyResult_t *callData, bool ioFailure);
		CCallResult<Steam, CreateItemResult_t> callResultItemCreate;
		void _item_created(CreateItemResult_t *callData, bool ioFailure);
		CCallResult<Steam, GetAppDependenciesResult_t> callResultGetAppDependencies;
		void _get_app_dependencies_result(GetAppDependenciesResult_t *callData, bool ioFailure);
		CCallResult<Steam, DeleteItemResult_t> callResultDeleteItem;
		void _item_deleted(DeleteItemResult_t *callData, bool ioFailure);
		CCallResult<Steam, GetUserItemVoteResult_t> callResultGetUserItemVote;
		void _get_item_vote_result(GetUserItemVoteResult_t *callData, bool ioFailure);
		CCallResult<Steam, RemoveAppDependencyResult_t> callResultRemoveAppDependency;
		void _remove_app_dependency_result(RemoveAppDependencyResult_t *callData, bool ioFailure);
		CCallResult<Steam, RemoveUGCDependencyResult_t> callResultRemoveUGCDependency;
		void _remove_ugc_dependency_result(RemoveUGCDependencyResult_t *callData, bool ioFailure);
		CCallResult<Steam, SetUserItemVoteResult_t> callResultSetUserItemVote;
		void _set_user_item_vote(SetUserItemVoteResult_t *callData, bool ioFailure);
		CCallResult<Steam, StartPlaytimeTrackingResult_t> callResultStartPlaytimeTracking;
		void _start_playtime_tracking(StartPlaytimeTrackingResult_t *callData, bool ioFailure);
		CCallResult<Steam, SteamUGCQueryCompleted_t> callResultUGCQueryCompleted;
		void _ugc_query_completed(SteamUGCQueryCompleted_t *callData, bool ioFailure);
		CCallResult<Steam, StopPlaytimeTrackingResult_t> callResultStopPlaytimeTracking;
		void _stop_playtime_tracking(StopPlaytimeTrackingResult_t *callData, bool ioFailure);
		CCallResult<Steam, SubmitItemUpdateResult_t> callResultItemUpdate;
		void _item_updated(SubmitItemUpdateResult_t *callData, bool ioFailure);
		CCallResult<Steam, UserFavoriteItemsListChanged_t> callResultFavoriteItemListChanged;
		void _user_favorite_items_list_changed(UserFavoriteItemsListChanged_t *callData, bool ioFailure);

		// User call results ////////////////////
		CCallResult<Steam, DurationControl_t> callResultDurationControl;
		void _duration_control(DurationControl_t *callData, bool ioFailure);
		CCallResult<Steam, EncryptedAppTicketResponse_t> callResultEncryptedAppTicketResponse;
		void _encrypted_app_ticket_response(EncryptedAppTicketResponse_t *callData, bool ioFailure);
		CCallResult<Steam, SteamServerConnectFailure_t> callResultSteamServerConnectFailure;
		void _steam_server_connect_failed(SteamServerConnectFailure_t *callData, bool ioFailure);
		CCallResult<Steam, StoreAuthURLResponse_t> callResultStoreAuthURLResponse;
		void _store_auth_url_response(StoreAuthURLResponse_t *callData, bool ioFailure);

		// User stat call results ///////////////
		CCallResult<Steam, GlobalAchievementPercentagesReady_t> callResultGlobalAchievementPercentagesReady;
		void _global_achievement_percentages_ready(GlobalAchievementPercentagesReady_t *callData, bool ioFailure);
		CCallResult<Steam, GlobalStatsReceived_t> callResultGetGlobalStatsReceived;
		void _global_stats_received(GlobalStatsReceived_t *callData, bool ioFailure);
		CCallResult<Steam, LeaderboardFindResult_t> callResultFindLeaderboard;
		void _leaderboard_find_result(LeaderboardFindResult_t *callData, bool ioFailure);
		CCallResult<Steam, LeaderboardScoresDownloaded_t> callResultEntries;
		void _leaderboard_scores_downloaded(LeaderboardScoresDownloaded_t *callData, bool ioFailure);
		CCallResult<Steam, LeaderboardScoreUploaded_t> callResultUploadScore;
		void _leaderboard_score_uploaded(LeaderboardScoreUploaded_t *callData, bool ioFailure);
		CCallResult<Steam, LeaderboardUGCSet_t> callResultLeaderboardUGCSet;
		void _leaderboard_ugc_set(LeaderboardUGCSet_t *callData, bool ioFailure);
		CCallResult<Steam, NumberOfCurrentPlayers_t> callResultNumberOfCurrentPlayers;
		void _number_of_current_players(NumberOfCurrentPlayers_t *callData, bool ioFailure);
		CCallResult<Steam, UserStatsReceived_t> callResultUserStatsReceived;
		void _user_stats_received(UserStatsReceived_t *callData, bool ioFailure);

		// Utility call results /////////////////
		CCallResult<Steam, CheckFileSignature_t> callResultCheckFileSignature;
		void _check_file_signature(CheckFileSignature_t *callData, bool ioFailure);
};
#endif // GODOTSTEAM_H