image: barichello/godot-ci:3.2.3

variables:
  EXPORT_NAME: retro-tank-party
  ITCHIO_NAME: dsnopek/retro-tank-party

stages:
  - build
  - export
  - sign
  - deploy

.export_before_script: &export_before_script
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends ca-certificates unzip wget

    # Put in the production Nakama info
    - ./scripts/generate-build-variables.sh

windows:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh windows release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/windows
    - godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows
  except:
    - steam

linux:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh linux release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/linux
    - godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux
  except:
    - steam

macosx:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh macosx release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/macosx
    - godot -v --export "Mac OSX" ./build/macosx/$EXPORT_NAME.zip

    # Extract the zip file since GitLab CI will zip it up again.
    - (cd ./build/macosx && unzip -a $EXPORT_NAME.zip && rm $EXPORT_NAME.zip)
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx
  except:
    - steam

macosx-sign:
  stage: sign
  tags:
    - osx
    - shell
  dependencies:
    - macosx
  script:
    - mkdir -v -p build/macosx-signed
    - >
      APP_PATH=$(find ./build/macosx/ -name \*.app -print -quit);
      APP_NAME=$(basename "$APP_PATH");
      cp -a "./build/macosx/$APP_NAME" ./build/macosx-signed/ && \
      ./scripts/macosx-notarize.sh "./build/macosx-signed/$APP_NAME.app";
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx-signed
  except:
    - steam

web:
  <<: *export_before_script
  stage: export
  script:
    - mkdir -v -p build/web
    - godot -v --export "HTML5" ./build/web/index.html
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/web
  except:
    - steam

pages:
  stage: deploy
  dependencies:
    - web
  script:
    - rm -rf public
    - cp -r build/web public
  artifacts:
    paths:
      - public
  only:
   - devel

itch:
  stage: deploy
  dependencies:
    - web
    - linux
    - windows
    - macosx
  script:
    - butler push build/web $ITCHIO_NAME:web-stable
    - butler push build/linux $ITCHIO_NAME:linux-stable
    - butler push build/windows $ITCHIO_NAME:windows-stable
    - butler push build/macosx $ITCHIO_NAME:macosx-stable
  only:
    - master

windows-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh windows release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Get the GodotSteam export templates.
    - wget "https://github.com/Gramps/GodotSteam/releases/download/g3-s150-gs381/windows-323-64bit.zip" -O ./build/templates/templates.zip
    - (cd ./build/templates && unzip templates.zip)
    - ./scripts/update-export-setting.py export_presets.cfg preset.4.options custom_template/debug "\"$PWD/build/templates/windows-323-template-64bit.exe\""
    - ./scripts/update-export-setting.py export_presets.cfg preset.4.options custom_template/release "\"$PWD/build/templates/windows-323-template-64bit.exe\""

    # Export!
    - mkdir -v -p build/windows-steam
    - godot -v --export "Windows Desktop (Steam)" ./build/windows-steam/$EXPORT_NAME.exe
    - ./scripts/download-steam-redistributables.sh win64/steam_api64.dll ./build/windows-steam/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows-steam
  only:
    - master
    - steam

linux-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh linux release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Get the GodotSteam export templates.
    - wget "https://github.com/Gramps/GodotSteam/releases/download/g3-s150-gs381/linux-323-64bit.tar.gz" -O ./build/templates/templates.tgz
    - (cd ./build/templates && tar -xzvf templates.tgz)
    - ./scripts/update-export-setting.py export_presets.cfg preset.5.options custom_template/debug "\"$PWD/build/templates/linux-323-template-64bit\""
    - ./scripts/update-export-setting.py export_presets.cfg preset.5.options custom_template/release "\"$PWD/build/templates/linux-323-template-64bit\""

    # Export!
    - mkdir -v -p build/linux-steam
    - godot -v --export "Linux/X11 (Steam)" ./build/linux-steam/$EXPORT_NAME.x86_64
    - ./scripts/download-steam-redistributables.sh linux64/libsteam_api.so ./build/linux-steam/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux-steam
  only:
    - master
    - steam

macosx-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh macosx release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Get the GodotSteam export templates.
    - wget "https://github.com/Gramps/GodotSteam/releases/download/g3-s150-gs381/osx-323.zip" -O ./build/templates/templates.zip
    - (cd ./build/templates && unzip templates.zip)
    - ./scripts/update-export-setting.py export_presets.cfg preset.6.options custom_template/debug "\"$PWD/build/templates/osx-323-template.zip\""
    - ./scripts/update-export-setting.py export_presets.cfg preset.6.options custom_template/release "\"$PWD/build/templates/osx-323-template.zip\""

    # Export!
    - mkdir -v -p build/macosx-steam
    - godot -v --export "Mac OSX (Steam)" ./build/macosx-steam/$EXPORT_NAME.zip

    # Extract the zip file since GitLab CI will zip it up again.
    - (cd ./build/macosx-steam && unzip -a $EXPORT_NAME.zip && rm $EXPORT_NAME.zip)
    - ./scripts/download-steam-redistributables.sh osx/libsteam_api.dylib ./build/macosx-steam/$EXPORT_NAME.app/Contents/MacOS/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx-steam
  only:
    - master
    - steam

macosx-steam-sign:
  stage: sign
  tags:
    - osx
    - shell
  dependencies:
    - macosx-steam
  script:
    - mkdir -v -p build/macosx-steam-signed
    - cp -a ./build/macosx-steam/$EXPORT_NAME.app ./build/macosx-steam-signed/
    - ./scripts/macosx-notarize.sh "./build/macosx-steam-signed/$EXPORT_NAME.app"
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx-steam-signed
  only:
    - master
    - steam

steam:
  stage: deploy
  image: cm2network/steamcmd
  dependencies:
    - windows-steam
    - linux-steam
  script:
    # Copy config and sentry files from the cache if they exist
    - >
      [ ! -d ./steam_cache ] && mkdir ./steam_cache;
      cp ./steam_cache/cache.vdf /home/steam/Steam/config/ 2>/dev/null || echo "No cached config file";
      cp ./steam_cache/ssfn* /home/steam/Steam/ 2>/dev/null || echo "No cached sentry file";

    # Push build to Steam
    - /home/steam/steamcmd/steamcmd.sh +set_steam_guard_code "$STEAM_GUARD_CODE" +login "$STEAM_BUILD_USERNAME" "$STEAM_BUILD_PASSWORD" +run_app_build "$PWD/scripts/steam/app_build_1568570.vdf" +quit

    # Copy config and setry files into the cache
    - cp /home/steam/Steam/config/config.vdf /home/steam/Steam/ssfn* ./steam_cache/
  cache:
    paths:
      - ./steam_cache/
      - ./steam_build_output/
  only:
    - master
    - steam

