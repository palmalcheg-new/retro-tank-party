image: ubuntu:18.04

variables:
  EXPORT_NAME: retro-tank-party
  GODOT_VERSION: "3.2"
  GODOT_VERSION_STABILITY: "alpha3"

stages:
  - build
  - export
  - deploy

cache:
  paths:
    - godot

godot:
  stage: build
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends ca-certificates wget
  script:
    - mkdir -p godot
    - cd godot
    - test -f Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_linux_headless.64.zip || wget https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/${GODOT_VERSION_STABILITY}/Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_linux_headless.64.zip
    - test -f Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_export_templates.tpz || wget https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/${GODOT_VERSION_STABILITY}/Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_export_templates.tpz

.export_before_script: &export_before_script
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends ca-certificates unzip wget

    # Make sure the build directories exist
    - mkdir -v -p build/linux
    - mkdir -v -p build/windows
    - mkdir -v -p build/web

    # Put in the production Nakama info
    - sed -i -e "s/use_production_nakama = false/use_production_nakama = true/" Main.gd
    - echo $NAKAMA_HOST
    - sed -i -e s/NAKAMA_HOST/${NAKAMA_HOST}/ Main.gd
    - cat Main.gd
    - sed -i -e s/NAKAMA_PORT/$NAKAMA_PORT/ Main.gd
    - sed -i -e s/NAKAMA_SERVER_KEY/$NAKAMA_SERVER_KEY/ Main.gd

    # Install our build of Godot
    - mkdir ~/.cache
    - mkdir -p ~/.config/godot
    - mkdir -p ~/.local/share/godot/templates/${GODOT_VERSION}.${GODOT_VERSION_STABILITY}
    - unzip godot/Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_linux_headless.64.zip
    - mv Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_linux_headless.64 /usr/local/bin/godot
    - unzip godot/Godot_v${GODOT_VERSION}-${GODOT_VERSION_STABILITY}_export_templates.tpz
    - mv templates/* ~/.local/share/godot/templates/${GODOT_VERSION}.${GODOT_VERSION_STABILITY}

linux:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - wget https://github.com/godotengine/webrtc-native/releases/download/0.3/webrtc_native_0.3_multi-release.zip
    - unzip -a webrtc_native_0.3_multi-release.zip
    - rm webrtc_native_0.3_multi-release.zip

    # Export!
    - godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux

windows:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - wget https://github.com/godotengine/webrtc-native/releases/download/0.3/webrtc_native_0.3_multi-release.zip
    - unzip -a webrtc_native_0.3_multi-release.zip
    - rm webrtc_native_0.3_multi-release.zip

    # Export!
    - godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows

#mac:
#  stage: export
#  script:
#    - godot -v --export "Mac OSX" ./build/mac/$EXPORT_NAME.zip
#  artifacts:
#    name: $EXPORT_NAME-$CI_JOB_NAME
#    paths:
#      - build/mac

web:
  <<: *export_before_script
  stage: export
  script:
    - godot -v --export "HTML5" ./build/web/index.html
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/web

pages:
  stage: deploy
  dependencies:
    - web
  script:
    - rm -rf public
    - cp -r build/web public
  artifacts:
    paths:
      - public
  only:
   - devel

itch:
  stage: deploy
  dependencies:
    - web
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends ca-certificates curl unzip
  script:
    # Install Itch.io's butler CLI tool
    - curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
    - unzip -a butler.zip
    - mv butler /usr/local/bin/
    - chmod +x /usr/local/bin/butler
    - butler -v

