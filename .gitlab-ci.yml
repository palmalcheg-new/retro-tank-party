image: barichello/godot-ci:3.2.3

variables:
  EXPORT_NAME: retro-tank-party
  ITCHIO_NAME: dsnopek/retro-tank-party

stages:
  - build
  - export
  - deploy

.export_before_script: &export_before_script
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends ca-certificates unzip wget

    # Put in the production Nakama info
    - ./scripts/generate-build-variables.sh

linux:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh linux release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/linux
    - godot -v --export "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux

windows:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh windows release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/windows
    - godot -v --export "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows

macosx:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh macosx release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/macosx
    - godot -v --export "Mac OSX" ./build/macosx/$EXPORT_NAME.zip

    # Extract the zip file since GitLab CI will zip it up again.
    - (cd ./build/macosx && unzip -a $EXPORT_NAME.zip && rm $EXPORT_NAME.zip)
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx

web:
  <<: *export_before_script
  stage: export
  script:
    - mkdir -v -p build/web
    - godot -v --export "HTML5" ./build/web/index.html
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/web

pages:
  stage: deploy
  dependencies:
    - web
  script:
    - rm -rf public
    - cp -r build/web public
  artifacts:
    paths:
      - public
  only:
   - devel

itch:
  stage: deploy
  dependencies:
    - web
    - linux
    - windows
    - macosx
  script:
    - butler push build/web $ITCHIO_NAME:web-stable
    - butler push build/linux $ITCHIO_NAME:linux-stable
    - butler push build/windows $ITCHIO_NAME:windows-stable
    - butler push build/macosx $ITCHIO_NAME:macosx-stable
  only:
   - master

linux-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh linux release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/linux-steam
    - godot -v --export "Linux/X11 (Steam)" ./build/linux-steam/$EXPORT_NAME.x86_64
    - ./scripts/download-steam-redistributables.sh linux64/libsteam_api.so ./build/linux-steam/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/linux-steam
  only:
    - master
    - steam

windows-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh windows release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/windows-steam
    - godot -v --export "Windows Desktop (Steam)" ./build/windows-steam/$EXPORT_NAME.exe
    - ./scripts/download-steam-redistributables.sh win64/steam_api64.dll ./build/windows-steam/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/windows-steam
  only:
    - master
    - steam

macosx-steam:
  <<: *export_before_script
  stage: export
  script:
    # Pull in the WebRTC GDNative plugin
    - ./scripts/download-webrtc-plugin.sh macosx release

    # Delete the debug version of the plugin.
    - rm webrtc_debug/webrtc_debug.gdnlib

    # Export!
    - mkdir -v -p build/macosx-steam
    - godot -v --export "Mac OSX (Steam)" ./build/macosx-steam/$EXPORT_NAME.zip

    # Extract the zip file since GitLab CI will zip it up again.
    - (cd ./build/macosx && unzip -a $EXPORT_NAME.zip && rm $EXPORT_NAME.zip)
    - ./scripts/download-steam-redistributables.sh osx/libsteam_api.dylib ./build/macosx-steam/$EXPORT_NAME.app/Contents/MacOS/
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/macosx-steam
  only:
    - master
    - steam

